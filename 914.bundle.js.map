{"version":3,"file":"914.bundle.js","mappings":"qJAKA,MAAMA,EAAgB,MAAMA,EAI1B,WAAAC,CAAYC,EAAa,CAAC,GAiBxB,GAfAC,KAAKC,KAAM,OAAI,gBAKfD,KAAKE,cAAgB,GACrBF,KAAKG,QAAU,EACfH,KAAKI,QAAS,EACdJ,KAAKK,MAAQ,IAAIC,aAAa,GAE9BN,KAAKO,uBAAwB,EAC7BR,EAAa,IAAKF,EAAcW,kBAAmBT,GACnDC,KAAKS,QAAUV,EAAWU,QAC1BT,KAAKU,MAAQX,EAAWW,MACxBV,KAAKI,OAASL,EAAWK,OACe,iBAA7BL,EAAWG,cAA4B,CAChDF,KAAKO,uBAAwB,EAC7B,IAAK,IAAII,EAAI,EAAGA,EAAIZ,EAAWG,cAAeS,IAC5CX,KAAKE,cAAcU,KACjB,IAAI,IAAc,CAChBC,MAAOd,EAAWc,MAClBC,OAAQf,EAAWe,OACnBC,WAAYhB,EAAWgB,WACvBC,UAAWjB,EAAWiB,YAI9B,KAAO,CACLhB,KAAKE,cAAgB,IAAIH,EAAWG,cAAce,IAAKC,GAAYA,EAAQC,SAC3E,MAAMC,EAAcpB,KAAKqB,aAAaF,OACtCnB,KAAKsB,OAAOF,EAAYP,MAAOO,EAAYN,OAAQM,EAAYG,YACjE,CACAvB,KAAKqB,aAAaF,OAAOK,GAAG,SAAUxB,KAAKyB,eAAgBzB,OACvDD,EAAW2B,qBAAuB1B,KAAKS,WACrCV,EAAW2B,+BAA+B,KAAW3B,EAAW2B,+BAA+B,IACjG1B,KAAK0B,oBAAsB3B,EAAW2B,oBAAoBP,OAE1DnB,KAAK2B,4BAGX,CACA,QAAIC,GACF,MAAMvB,EAAQL,KAAKK,MAGnB,OAFAA,EAAM,GAAKL,KAAK6B,WAChBxB,EAAM,GAAKL,KAAK8B,YACTzB,CACT,CACA,SAAIQ,GACF,OAAOb,KAAKqB,aAAaF,OAAON,KAClC,CACA,UAAIC,GACF,OAAOd,KAAKqB,aAAaF,OAAOL,MAClC,CACA,cAAIe,GACF,OAAO7B,KAAKqB,aAAaF,OAAOU,UAClC,CACA,eAAIC,GACF,OAAO9B,KAAKqB,aAAaF,OAAOW,WAClC,CACA,cAAIf,GACF,OAAOf,KAAKqB,aAAaF,OAAOI,WAClC,CACA,gBAAIF,GACF,OAAOrB,KAAKE,cAAc,EAC5B,CACA,cAAAuB,CAAeN,GACbnB,KAAKsB,OAAOH,EAAON,MAAOM,EAAOL,OAAQK,EAAOI,aAAa,EAC/D,CAMA,yBAAAI,GACO3B,KAAK0B,sBACR1B,KAAK0B,oBAAsB,IAAI,IAAc,CAC3Cb,MAAOb,KAAKa,MACZC,OAAQd,KAAKc,OACbC,WAAYf,KAAKe,WACjBgB,OAAQ,uBACRC,qBAAqB,EACrBhB,WAAW,EACXiB,cAAe,IAIrB,CACA,MAAAX,CAAOT,EAAOC,EAAQC,EAAaf,KAAKe,WAAYmB,GAAmB,GACrElC,KAAKG,UACLH,KAAKE,cAAciC,QAAQ,CAACd,EAAcV,KACpCuB,GAA0B,IAANvB,GAExBU,EAAaF,OAAOG,OAAOT,EAAOC,EAAQC,KAExCf,KAAK0B,qBACP1B,KAAK0B,oBAAoBP,OAAOG,OAAOT,EAAOC,EAAQC,EAE1D,CACA,OAAAqB,GACEpC,KAAKqB,aAAaF,OAAOkB,IAAI,SAAUrC,KAAKyB,eAAgBzB,MACxDA,KAAKO,uBACPP,KAAKE,cAAciC,QAASjB,IAC1BA,EAAQkB,YAGRpC,KAAK0B,sBACP1B,KAAK0B,oBAAoBU,iBAClBpC,KAAK0B,oBAEhB,GAGF7B,EAAcW,eAAiB,CAE7BK,MAAO,EAEPC,OAAQ,EAERC,WAAY,EAEZb,cAAe,EAEfO,SAAS,EAETC,OAAO,EAEPM,WAAW,EAGXZ,QAAQ,GAEV,IAAIkC,EAAezC,C,wDC1InB,MAAM0C,UAAuB,IAU3B,WAAAzC,EAAY,OAAE0C,EAAM,OAAEC,EAAM,KAAEb,IAC5Bc,QAOA1C,KAAKC,KAAM,OAAI,UAKfD,KAAK2C,cAAgB,iBAKrB3C,KAAK4C,SAAW,EAKhB5C,KAAK6C,aAAc,OAAI,YAKvB7C,KAAK8C,iBAAkB,EAKvB9C,KAAK+C,WAAY,EACjB/C,KAAKwC,OAASA,EACdxC,KAAKyC,OAAkB,EAATA,EACdzC,KAAK4B,KAAOA,EACZ5B,KAAKwC,OAAOhB,GAAG,SAAUxB,KAAKgD,eAAgBhD,KAChD,CACA,cAAAgD,GACEhD,KAAK6C,aAAc,OAAI,YACvB7C,KAAKiD,KAAK,SAAUjD,KACtB,CAMA,OAAAoC,CAAQc,GAAgB,GACtBlD,KAAK+C,WAAY,EACbG,GACFlD,KAAKwC,OAAOJ,UAEdpC,KAAKiD,KAAK,SAAUjD,MACpBA,KAAKwC,OAAS,IAChB,E,gDClEF,MAAMW,EAAwB,GAC9BA,EAAsB,IAAcC,WAAQ,EAC5CD,EAAsB,IAAcE,UAAY,CAC9CC,iBAAkB,EAClBC,gBAAiB,GAEnBJ,EAAsB,IAAcK,oBAAsB,CACxDC,aAAc,CACZC,QAAS,QACTC,OAAQ,mBAEVC,YAAa,CACXF,QAAS,QACTC,OAAQ,oBAGZR,EAAsB,IAAcU,uBAAyB,CAC3DJ,aAAc,CACZC,QAAS,QACTC,OAAQ,mBAEVC,YAAa,CACXF,QAAS,QACTC,OAAQ,oBAGZR,EAAsB,IAAcW,aAAe,CACjDR,iBAAkB,EAClBG,aAAc,CACZC,QAAS,QACTC,OAAQ,QAEVC,YAAa,CACXF,QAAS,QACTC,OAAQ,SAGZR,EAAsB,IAAcY,qBAAuB,CACzDT,iBAAkB,EAClBG,aAAc,CACZC,QAAS,YACTC,OAAQ,QAEVC,YAAa,CACXF,QAAS,YACTC,OAAQ,Q,iBC/CZ,SAASK,EAAWC,EAAKC,GAEvB,MAAO,iCADOD,EAAMC,+CAGaD,qBAAuBA,8BAG1D,C,yBACA,MAAME,EAAwB,CAC5BC,IAAK,8BAELC,IAAK,mCAEL,YAAa,mEAGb,YAAa,qGAIb,YAAa,uIAKb,YAAa,6EAGb,YAAa,oHAIb,YAAa,2JAKb,cAAe,uIAKf,cAAe,kTAUf,cAAe,4FAIf,cAAeL,EAAW,EAAG,GAC7B,cAAeA,EAAW,EAAG,GAC7B,cAAeA,EAAW,EAAG,GAC7B,cAAeA,EAAW,EAAG,GAC7B,cAAeA,EAAW,EAAG,GAC7B,cAAeA,EAAW,EAAG,IAEzBM,EAAuB,IACxBH,EACH,cAAe,6I,qDCjEjB,MAAMI,EAAkB,CACtBC,KAAM,oBACNC,OAAQ,CACNC,OAEE,kQAWFC,KAEE,sHAKFC,IAEE,gMASAC,EAAwB,IACzBN,EACHE,OAAQ,IACHF,EAAgBE,OAEnBC,OAAQH,EAAgBE,OAAOC,OAAOI,QAAQ,WAAY,cAGxDC,EAAoB,CACxBP,KAAM,oBACNC,OAAQ,CACNC,OAEE,gIAOFC,KAEE,yFAKFC,IAEE,sJ,iBCzDN,SAASI,EAAoBC,EAAMC,EAAKzC,GACtC,MAAM0C,GAASF,GAAQ,GAAK,KAAO,IACnCC,EAAIzC,MAAoB,IAAPwC,GAAc,IAAME,EACrCD,EAAIzC,MAAawC,GAAQ,EAAI,KAAO,IAAME,EAC1CD,EAAIzC,MAAawC,GAAQ,GAAK,KAAO,IAAME,EAC3CD,EAAIzC,KAAY0C,CAClB,C,0DCZA,MAAMC,EAAa,CACjBZ,KAAM,cACNC,OAAQ,CACNC,OAEE,sLASFC,KAEE,qFAKJU,SAAU,CACRX,OAEE,6IAOFC,KAEE,+EAMAW,EAAe,CACnBd,KAAM,cACNC,OAAQ,CACNC,OAEE,uDAIFC,KAEE,qEAKJU,SAAU,CACRX,OAEE,sDAMFC,KAEE,8D,0DChEN,MAAMY,EACJ,WAAAzF,CAAY0F,GACVxF,KAAKyF,UAAYD,CACnB,CACA,gBAAAE,GACA,CACA,iBAAAC,GACA,CACA,kBAAAC,GACE,OAAO,CACT,CACA,aAAAC,CAAcC,EAAWC,GACvB/F,KAAKyF,UAAUO,YAAYC,MAAMC,MAAMH,GACvCA,EAAeI,IAAIL,EACrB,CACA,OAAAM,CAAQN,GACDA,EAAUO,cAEfP,EAAUQ,OAAOtG,KAAKyF,UACxB,CACA,OAAArD,GACEpC,KAAKyF,UAAY,IACnB,EAEFF,EAAiBgB,UAAY,CAC3BC,KAAM,CACJ,KAAcC,WACd,KAAcC,YACd,KAAcC,aAEhBnC,KAAM,gB,kCChCR,SAASoC,EAAoBC,EAAarB,GACxC,MAAMO,EAAiBc,EAAYd,eAC7Be,EAAef,EAAee,aACpC,IAAK,IAAInG,EAAI,EAAGA,EAAIoF,EAAegB,gBAAiBpG,IAAK,CACvD,MAAMqG,EAAcF,EAAanG,GACjC6E,EAASwB,EAAYC,cAAcb,QAAQY,EAC7C,CACF,CCDA,MAAME,EAAa,IAAIC,EAAA,EACvB,MAAMC,EACJ,WAAAtH,CAAY0F,GACVxF,KAAKyF,UAAYD,CACnB,CACA,cAAA6B,CAAeR,EAAad,GACtBc,EAAYS,kBACdtH,KAAKuH,6BAA6BV,EAAad,GAE/C/F,KAAKwH,qBAAqBX,EAAad,EAE3C,CACA,OAAAK,CAAQS,GACDA,EAAYR,eAEbQ,EAAYS,kBACdtH,KAAKyH,uBAAuBZ,GAE5B7G,KAAK0H,eAAeb,GAExB,CACA,OAAAzE,GACEpC,KAAKyF,UAAY,IACnB,CACA,oBAAA+B,CAAqBX,EAAad,GAChC/F,KAAKyF,UAAUO,YAAYC,MAAMC,MAAMH,GACnCc,EAAYc,wBACd,IAAQC,OAAOf,EAAYc,uBAC3Bd,EAAYc,sBAAwB,MAEtC5B,EAAeI,IAAIU,EACrB,CACA,4BAAAU,CAA6BV,EAAad,GACxC,MAAM8B,EAAuBhB,EAAYc,wBAA0Bd,EAAYc,sBAAwB,IAAQG,IAAIC,EAAA,IACnHF,EAAqBG,WAAanB,EAAYoB,KAC9CJ,EAAqBK,UAAYrB,EAAYoB,KAAKE,uBAClDN,EAAqB3G,QAAU2F,EAAY3F,QAC3C2G,EAAqBO,OAASvB,EAAYwB,eAC1CtC,EAAeI,IAAIU,GACnB7G,KAAKyF,UAAUO,YAAYC,MAAMqC,WAAWT,EAAsB9B,EACpE,CACA,sBAAA0B,CAAuBZ,GACrB,GAAIA,EAAY0B,mBAAoB,CAClC1B,EAAY0B,oBAAqB,EACjC,MAAMC,EAAuBtB,EAAWuB,WAAWC,WAChD7B,EAAYwB,eAAeM,GAC3B9B,EAAYwB,eAAeO,GAE9B5I,KAAKyF,UAAUoD,aAAajI,KAAKiG,EAAY3F,SAAS,EAAM,KAAM2F,EAAY3F,QAAQ4H,OACtF9I,KAAKyF,UAAUsD,eAAenI,KAAK,CACjC4H,uBACAQ,WAAY,aAEdpC,EAAoBC,EAAa7G,KAAKyF,UAAUO,aAChDhG,KAAKyF,UAAUoD,aAAaI,mBAC5BjJ,KAAKyF,UAAUoD,aAAaK,MAC5BlJ,KAAKyF,UAAUsD,eAAeG,KAChC,CACArC,EAAYc,sBAAsBwB,SAASC,cAAcvC,EAAYc,uBACrEd,EAAYc,sBAAsBwB,SAASE,SAASC,QAAQ,GAAGC,QACjE,CACA,cAAA7B,CAAeb,GACb7G,KAAKyF,UAAUsD,eAAenI,KAAK,CACjC4H,qBAAsB3B,EAAY2C,8BAClCR,WAAYnC,EAAY4C,kBAE1B7C,EAAoBC,EAAa7G,KAAKyF,UAAUO,aAChDhG,KAAKyF,UAAUsD,eAAeG,KAChC,EAEF9B,EAAgBb,UAAY,CAC1BC,KAAM,CACJ,KAAcC,WACd,KAAcC,YACd,KAAcC,aAEhBnC,KAAM,e,iCClFR,SAASkF,EAAUC,EAAMC,GACvBA,IAAUA,EAAQ,GAClB,IAAK,IAAIC,EAAID,EAAOC,EAAIF,EAAKG,QACvBH,EAAKE,GAD0BA,IAEjCF,EAAKE,GAAK,IAKhB,C,uBCLA,MAAME,EAAgB,IAAIC,EAAA,GACpBC,EAA6B,KAAiB,KAAe,IACnE,SAASC,EAA4BrD,EAAasD,GAA0B,IAwB5E,SAAoCtD,GAClC,MAAMoB,EAAOpB,EAAYoB,KACzB,IAAImC,EACJ,GAAIvD,EAAYwD,kBAAmB,CACjC,MAAMA,EAAoBxD,EAAYwD,kBACtCxD,EAAYyD,eAAeC,WACzBtC,EAAKE,uBACLkC,EAAkBC,gBAEpBzD,EAAYmC,YAAa,EAAAwB,EAAA,GACvBvC,EAAKwC,WACLJ,EAAkBrB,YAEpBoB,EAAanC,EAAKyC,WAAaL,EAAkBD,UACnD,MACEvD,EAAYyD,eAAeK,SAAS1C,EAAK2C,gBACzC/D,EAAYmC,WAAaf,EAAK4C,WAC9BT,EAAanC,EAAK6C,WAEpBV,EAAaA,EAAa,EAAI,EAAIA,EAAa,EAAI,EAAIA,EACvDvD,EAAYuD,WAAaA,EACzBvD,EAAY4C,gBAAkB5C,EAAYmC,YAA4B,IAAboB,GAAyB,GACpF,CA7CEW,CAA2BlE,GAC3B,MAAMmE,EAAmBnE,EAAYmE,iBAC/BC,EAAapE,EAAYoE,aAC/B,IAAK,MAAMpB,KAAKmB,EAAkB,CAChC,MAAME,EAAmBC,OAAOtB,GAC1BuB,EAAkBJ,EAAiBnB,GACnCF,EAAOyB,EAAgBzB,KACvBC,EAAQwB,EAAgBxB,MAC9B,IAAK,IAAIjJ,EAAI,EAAGA,EAAIiJ,EAAOjJ,IAAK,CAC9B,MAAM0K,EAAQ1B,EAAKhJ,GACf0K,EAAMC,oBAAsBzE,GAAewE,EAAME,2BAA6BL,GAChFM,EAA2BH,EAAOJ,EAAY,EAElD,CACAvB,EAAUC,EAAMC,GAChBwB,EAAgBxB,MAAQ,CAC1B,CACA,GAAIO,EACF,IAAK,IAAIxJ,EAAI,EAAGA,EAAIkG,EAAY4E,oBAAoB3B,OAAQnJ,IAC1DuJ,EAA4BrD,EAAY4E,oBAAoB9K,GAAIwJ,EAGtE,CAwBA,SAASqB,EAA2B1F,EAAWmF,EAAYS,GACzD,GAAIT,IAAenF,EAAUmF,WAC3B,OACFnF,EAAUmF,WAAaA,EACvBnF,EAAU6F,WAAY,EACtB,MAAMf,EAAiB9E,EAAU8E,eACjC9E,EAAU8F,uBACV,MAAMC,EAAS/F,EAAU+F,OAiBzB,GAhBIA,IAAWA,EAAOhF,aACpB6E,GAAe5F,EAAUgG,aACzBhG,EAAUqC,uBAAuBoC,WAC/BK,EACAiB,EAAO1D,wBAELuD,EAAczB,GAChB8B,EAA2BjG,EAAW+F,EAAQH,KAGhDA,EAAc5F,EAAUgG,aACxBhG,EAAUqC,uBAAuBwC,SAASC,GACtCc,EAAczB,GAChB8B,EAA2BjG,EAAWiE,EAAe2B,KAGpD5F,EAAUe,YAAa,CAC1B,MAAMmF,EAAWlG,EAAUkG,SACrBlC,EAASkC,EAASlC,OACxB,IAAK,IAAInJ,EAAI,EAAGA,EAAImJ,EAAQnJ,IAC1B6K,EAA2BQ,EAASrL,GAAIsK,EAAYS,GAEtD,MAAM7E,EAAcf,EAAUwF,kBACxBtD,EAAalC,EACfkC,EAAWf,eAAiBJ,EAAYoF,oBAC1CpF,EAAYnB,iBAAiBsC,EAEjC,CACF,CACA,SAAS+D,EAA2BjG,EAAW+F,EAAQH,GACrD,GAAIA,EAAc,KAAc,CAC9B5F,EAAU2E,YAAa,EAAAD,EAAA,GACrB1E,EAAU+E,WACVgB,EAAOpB,YAET,IAAIC,EAAa5E,EAAUgF,WAAae,EAAOnB,WAC/CA,EAAaA,EAAa,EAAI,EAAIA,EAAa,EAAI,EAAIA,EACvD5E,EAAU4E,WAAaA,EACvB5E,EAAUoG,gBAAkBpG,EAAU2E,YAA4B,IAAbC,GAAyB,GAChF,CACIgB,EAAc,MAChB5F,EAAUqG,eAA8C,YAA7BrG,EAAUsG,eAA+BP,EAAOM,eAAiBrG,EAAUsG,gBAEpGV,EAAc,OAChB5F,EAAUuG,oBAAsBvG,EAAUwG,mBAAqBT,EAAOQ,qBAExEvG,EAAUgG,aAAe,CAC3B,CClGA,MAAM,EAAa,IAAI3E,EAAA,EACvB,MAAMoF,EACJ,WAAAzM,CAAY0F,GACVxF,KAAKyF,UAAYD,CACnB,CACA,MAAAc,EAAO,UAAER,EAAS,UAAEoC,IAClB,MAAM2D,EAAS/F,EAAU+F,OACnBxB,EAAoBvE,EAAUe,YAAYwD,kBAChDvE,EAAU+F,OAAS,KACnB/F,EAAUe,YAAYwD,kBAAoB,KAC1C,MAAM7E,EAAWxF,KAAKyF,UACtB,IAAI+G,EAAyB,EACzBtE,IACFsE,EAAyBA,EAAuB7B,SAAS7E,EAAUe,YAAY+D,gBAC/E9E,EAAUe,YAAY+D,eAAeD,SAASzC,IAEhD,MAAMlC,EAAcR,EAASQ,YAC7BhG,KAAKyM,0BAA0B3G,EAAUe,YAAa,MACtD7G,KAAK0M,oBAAoB5G,EAAUe,aACnCrB,EAASuD,eAAe4D,MAAM,CAC5BnE,qBAAsBN,EAAYpC,EAAUe,YAAY+D,eAAiB9E,EAAUe,YAAYyD,eAC/FtB,WAAYlD,EAAUe,YAAY4C,kBAEpC7C,EAAoBd,EAAUe,YAAab,GACvCA,EAAY4G,cACd5G,EAAY4G,aAAaC,YAEvB3E,GACFpC,EAAUe,YAAY+D,eAAeD,SAAS6B,GAEhD1G,EAAU+F,OAASA,EACnB/F,EAAUe,YAAYwD,kBAAoBA,CAC5C,CACA,OAAAjI,GACEpC,KAAKyF,UAAY,IACnB,CACA,yBAAAgH,CAA0B5F,EAAaiG,GACrC,GAAIjG,EAAYS,kBAAmB,CACjC,IAAKT,EAAYkG,mBACf,OACFD,EAAwBjG,CAC1B,CACAA,EAAYmG,iCAAmCF,EAC/C,IAAK,IAAInM,EAAIkG,EAAY4E,oBAAoB3B,OAAS,EAAGnJ,GAAK,EAAGA,IAC/DX,KAAKyM,0BAA0B5F,EAAY4E,oBAAoB9K,GAAImM,GAGrE,GADAjG,EAAYoG,qBACRpG,EAAYS,mBACd,GAAIT,EAAY0B,mBAAoB,CAClC,MAAMH,EAASvB,EAAYoB,KAAKiF,iBAChC9E,EAAO+E,OACP,MAAMC,EAAcvG,EAAY3F,QAC5B2F,EAAY3F,SACdmM,EAAA,EAAYC,cAAczG,EAAY3F,SAAS,GAEjD,MAAMsE,EAAWxF,KAAKyF,UAChB1E,EAAa8F,EAAY0G,eAAexM,YAAcyE,EAASgI,KAAKzM,WACpEC,EAAY6F,EAAY0G,eAAevM,WAAawE,EAASgI,KAAKxM,UAClEyM,EAAY5G,EAAY0G,eAAeE,WAAa,SACpDvM,EAAUmM,EAAA,EAAYK,kBAC1BtF,EAAOvH,MACPuH,EAAOtH,OACPC,EACAC,GAEFE,EAAQyM,QAAQC,MAAQ,IAAIC,EAAA,EAAa,CAAEJ,cAC3C5G,EAAY3F,QAAUA,EACtB2F,EAAYwB,iBAAmBxB,EAAYwB,eAAiB,IAAIyF,EAAA,GAChEjH,EAAYwB,eAAesC,SAASvC,GAChCgF,IAAgBvG,EAAY3F,SAC1B2F,EAAYwD,oBACdxD,EAAYwD,kBAAkB4B,oBAAqB,EAGzD,OACSpF,EAAY3F,UACrBmM,EAAA,EAAYC,cAAczG,EAAY3F,SAAS,GAC/C2F,EAAY3F,QAAU,KAE1B,CACA,mBAAAwL,CAAoB7F,GAClB,MAAMrB,EAAWxF,KAAKyF,UAChBO,EAAcR,EAASQ,YAiB7B,GAhBAa,EAAYkH,YAAYvI,GACxBqB,EAAYd,eAAeC,YAAcA,EACpCa,EAAYoF,mBAGfvC,EAAU7C,EAAYmH,4BAA4BrE,KAAM,GClG9D,SAA6B9C,EAAab,GACxC,MAAM,KAAE2D,EAAI,MAAEC,GAAU/C,EAAYmH,4BACpC,IAAIC,GAAkB,EACtB,IAAK,IAAItN,EAAI,EAAGA,EAAIiJ,EAAOjJ,IAAK,CAC9B,MAAMmF,EAAY6D,EAAKhJ,GAIvB,GADAsN,EADajI,EADMF,EACiBmB,cACbrB,mBAAmBE,GACtCmI,EACF,KAEJ,CACApH,EAAYoF,mBAAqBgC,CAEnC,CDkFMC,CAAoBrH,EAAab,GAInCkE,EAA4BrD,GACxBA,EAAYoF,oBACdpF,EAAYoF,oBAAqB,EACjCjM,KAAKmO,mBAAmBtH,EAAarB,IAErCxF,KAAKoO,mBAAmBvH,GAE1BA,EAAYmH,4BAA4BpE,MAAQ,EAChDpE,EAASQ,YAAYC,MAAMoI,OAAOxH,EAAYd,iBAC1Cc,EAAYS,mBAAsBT,EAAY0B,mBAElD,IAAK,IAAI5H,EAAI,EAAGA,EAAIkG,EAAY4E,oBAAoB3B,OAAQnJ,IAC1DX,KAAK0M,oBAAoB7F,EAAY4E,oBAAoB9K,GAE7D,CACA,kBAAAyN,CAAmBvH,GACjB,MAAM,KAAE8C,EAAI,MAAEC,GAAU/C,EAAYmH,4BACpC,IAAK,IAAIrN,EAAI,EAAGA,EAAIiJ,EAAOjJ,IAAK,CAC9B,MAAMmF,EAAY6D,EAAKhJ,GACnBmF,EAAUwI,eACZzH,EAAYnB,iBAAiBI,EAEjC,CACA4D,EAAUC,EAAMC,EAClB,CACA,kBAAAuE,CAAmBtH,EAAa0H,GAC9B,MAAMtG,EAAOpB,EAAYoB,KACnBlC,EAAiBc,EAAYd,eACnCA,EAAeyI,QACf,MAAMhJ,EAAW+I,EAAgBvI,YAAcuI,EAAkBA,EAAgBtI,MAAMT,SACjFQ,EAAcR,EAASQ,YAC7BA,EAAYC,MAAMwI,WAAW1I,GAC7BC,EAAY0I,UAAUD,aACtBzI,EAAY2I,UAAUF,aAClBxG,EAAK2G,kBACP3G,EAAK4G,eAEP5G,EAAK6G,8BAA8B/I,EAAgBP,EAAU,MAC7DQ,EAAYC,MAAM8I,SAAShJ,GAC3BC,EAAY0I,UAAUK,SAAShJ,EACjC,EAGFwG,EAAkBhG,UAAY,CAC5BC,KAAM,CACJ,KAAcwI,YACd,KAAcC,aACd,KAAcC,cAEhB1K,KAAM,eElJR,MAAM2K,EACJ,WAAArP,CAAY0F,GACVxF,KAAKyF,UAAYD,CACnB,CACA,aAAAK,CAAcuJ,EAAQrJ,GACpB,MAAMsJ,EAAYrP,KAAKsP,cAAcF,GACjCA,EAAOd,eACTtO,KAAKuP,uBAAuBH,EAAQC,GACtCrP,KAAKyF,UAAUO,YAAYC,MAAMqC,WAAW+G,EAAWtJ,EACzD,CACA,gBAAAL,CAAiB0J,GACf,MAAMC,EAAYrP,KAAKsP,cAAcF,GACjCA,EAAOd,eACTtO,KAAKuP,uBAAuBH,EAAQC,GACtCA,EAAUlG,SAASC,cAAciG,EACnC,CACA,kBAAAzJ,CAAmBwJ,GACjB,MAAMC,EAAYrP,KAAKsP,cAAcF,GACrC,OAAQC,EAAUlG,SAASqG,sBACzBH,EACAD,EAAOK,SAEX,CACA,sBAAAF,CAAuBH,EAAQM,GAC7BA,EAAgBtH,OAASgH,EAAOO,aAChCD,EAAgBxO,QAAUkO,EAAOK,QACnC,CACA,aAAAH,CAAcF,GACZ,OAAOA,EAAOQ,SAAS5P,KAAKyF,UAAUxF,MAAQD,KAAK6P,eAAeT,EACpE,CACA,cAAAS,CAAeT,GACb,MAAMM,EAAkB,IAAI3H,EAAA,EAO5B,OANA2H,EAAgB1H,WAAaoH,EAC7BM,EAAgBxH,UAAYkH,EAAOU,eACnCJ,EAAgBxO,QAAUkO,EAAOK,SACjCC,EAAgBtH,OAASgH,EAAOO,aAChCD,EAAgBK,YAAc/P,KAAKyF,UAAUuK,aAAeZ,EAAOY,aACnEZ,EAAOQ,SAAS5P,KAAKyF,UAAUxF,KAAOyP,EAC/BA,CACT,CACA,OAAAtN,GACEpC,KAAKyF,UAAY,IACnB,EAGF0J,EAAW5I,UAAY,CACrBC,KAAM,CACJ,KAAcC,WACd,KAAcC,YACd,KAAcC,aAEhBnC,KAAM,U,kCClDR,MAAMyL,EAAe,MAAMA,EACzB,WAAAnQ,CAAY0F,EAAU0K,GACpBlQ,KAAKmQ,MAAQC,EAAA,EAAMC,QACnBrQ,KAAKsQ,0BAA4CC,OAAOC,OAAO,MAE/DxQ,KAAKyQ,eAAiCF,OAAOC,OAAO,MACpDxQ,KAAKwF,SAAWA,EAChBxF,KAAK0Q,SAAWR,EAChBlQ,KAAK0Q,SAASC,OAAO3Q,KACvB,CACA,iBAAO4Q,CAAWpM,GAChB,OAAO,IAAIxE,KAAK6Q,mBAAmBrM,EACrC,CACA,UAAAiK,CAAW1I,GACT,IAAI+K,EAAW9Q,KAAKsQ,0BAA0BvK,EAAe9F,KACxD6Q,IACHA,EAAW9Q,KAAKsQ,0BAA0BvK,EAAe9F,KAAuBsQ,OAAOC,OAAO,MAC9FM,EAASC,UAAYD,EAASC,QAAU,IAAIC,EAAA,EAAe,CACzDC,YAAajR,KAAKwF,SAAS0L,OAAOC,yBAGtCnR,KAAKyQ,eAAiBK,EACtB9Q,KAAKoR,aAAepR,KAAKyQ,eAAeM,QACxC,IAAK,MAAMpQ,KAAKX,KAAKyQ,eACnBzQ,KAAKyQ,eAAe9P,GAAG0Q,OAE3B,CACA,UAAA/I,CAAWgJ,EAAiBvL,GAC1B,GAAI/F,KAAKoR,aAAa5M,OAAS8M,EAAgBC,YAAa,CAC1DvR,KAAKoR,aAAalL,MAAMH,GACxB,IAAIE,EAAQjG,KAAKyQ,eAAea,EAAgBC,aAC3CtL,IACHA,EAAQjG,KAAKyQ,eAAea,EAAgBC,aAAetB,EAAaW,WAAWU,EAAgBC,aACnGtL,EAAMoL,SAERrR,KAAKoR,aAAenL,CACtB,CACAjG,KAAKoR,aAAajL,IAAImL,EACxB,CACA,MAAMvL,GACJ/F,KAAKoR,aAAalL,MAAMH,EAC1B,CACA,QAAAgJ,CAAShJ,GACP/F,KAAKoR,aAAalL,MAAMH,GACxB,MAAMyL,EAAUxR,KAAKyQ,eACrB,IAAK,MAAM9P,KAAK6Q,EAAS,CACvB,MAAMvL,EAAQuL,EAAQ7Q,GAChB0I,EAAWpD,EAAMoD,SACvBA,EAASoI,YAAYC,gBAAgBzL,EAAMwL,YAAaxL,EAAM0L,WAAW,GACzEtI,EAASC,QAAQ,GAAGoI,gBAAgBzL,EAAM2L,gBAAgBC,YAAa5L,EAAM6L,eAAe,EAC9F,CACF,CACA,MAAAzD,CAAOtI,GACL,MAAM+K,EAAW9Q,KAAKsQ,0BAA0BvK,EAAe9F,KAC/D,IAAK,MAAMU,KAAKmQ,EAAU,CACxB,MAAMiB,EAAUjB,EAASnQ,GACnB0I,EAAW0I,EAAQ1I,SACrB0I,EAAQC,QACVD,EAAQC,OAAQ,EAChB3I,EAASC,QAAQ,GAAGC,OAA+B,EAAxBwI,EAAQD,eAEvC,CACF,CACA,OAAA1L,CAAQH,GACN,GAAqB,eAAjBA,EAAMgM,OAAyB,CACjC,MAAMF,EAAU9L,EAAM8L,QAChB1I,EAAW0I,EAAQ1I,SACnB6I,EAASH,EAAQG,OACvBlS,KAAK0Q,SAAS/D,MAAM3M,KAAMqJ,EAAU6I,EACtC,CACAlS,KAAK0Q,SAAStK,QAAQpG,KAAMiG,EAC9B,CACA,OAAA7D,GACEpC,KAAKmQ,MAAQ,KACbnQ,KAAKwF,SAAW,KAChBxF,KAAK0Q,SAAW,KAChB,IAAK,MAAM/P,KAAKX,KAAKyQ,eACnBzQ,KAAKyQ,eAAe9P,GAAGyB,UAEzBpC,KAAKyQ,eAAiB,IACxB,GAGFR,EAAa1J,UAAY,CACvBC,KAAM,CACJ,KAAcC,WACd,KAAcC,YACd,KAAcC,aAEhBnC,KAAM,SAERyL,EAAaY,mBAAqCN,OAAOC,OAAO,MAChE,IAAI2B,EAAclC,EAClB,KAAWmC,YAAY,KAAcC,QAASF,EAAYtB,oBAC1D,KAAW1K,IAAI6K,EAAA,G,gEC7Ff,MAAMsB,EAAU,MAAMA,UAAgBC,EAAA,EAIpC,WAAAzS,CAAY0S,GAEV9P,MADA8P,EAAU,IAAKF,EAAQ9R,kBAAmBgS,IAG1CxS,KAAKyS,SAAU,EAKfzS,KAAK0S,OAAStC,EAAA,EAAMC,QACpBrQ,KAAK0O,UAAY8D,EAAQ9D,UACzB1O,KAAK2S,QAAUH,EAAQG,QACU,kBAAtBH,EAAQxR,UACjBhB,KAAKgB,UAAYwR,EAAQxR,UAAY,KAAO,MAE5ChB,KAAKgB,UAAYwR,EAAQxR,UAE3BhB,KAAKe,WAAayR,EAAQzR,WAC1Bf,KAAK4S,cAAgBJ,EAAQI,cAC7B5S,KAAK6S,eAAiBL,EAAQK,eAC9B7S,KAAK8S,YAAY,WAAY,EAAG,EAClC,CAQA,KAAAC,CAAMC,EAAeC,EAAOC,EAAQC,GAClCH,EAAcI,YAAYpT,KAAMiT,EAAOC,EAAQC,EACjD,CAKA,aAAIzE,GACF,OAAO1O,KAAK0S,OAAOhE,SACrB,CAEA,aAAIA,CAAU2E,GACZrT,KAAK0S,OAAOhE,UAAY2E,CAC1B,CAMA,WAAOC,CAAKd,GACV,MAAM,IAAEe,EAAG,GAAEC,KAAOC,GAASjB,EAC7B,IAAIkB,EACAC,EAOJ,OANIJ,IACFG,EAAaE,EAAA,EAAWN,KAAKC,IAE3BC,IACFG,EAAYE,EAAA,EAAUP,KAAKE,IAEtB,IAAIlB,EAAQ,CACjBoB,aACAC,eACGF,GAEP,GAGFnB,EAAQ9R,eAAiB,CACvBkO,UAAW,SACX3N,WAAY,EACZ4R,QAAS,EACT3R,UAAW,MACX4R,eAAe,EACfC,gBAAgB,GAElB,IAAIiB,EAASxB,ECpFb,ICAInR,EAAS,yjFCWb,MAAM4S,UAAmBD,EACvB,WAAAhU,CAAY0S,GACV,MAAM,OAAEpD,KAAWqE,GAASjB,EACtBwB,EAAgB,IAAIC,EAAA,EAAc7E,EAAOlO,SACzCgT,EAAiB,IAAIC,EAAA,EAAa,CACtCC,cAAe,CAAEf,MAAO,IAAIlM,EAAA,EAAUX,KAAM,eAC5C6N,WAAY,CAAEhB,MAAOW,EAAcM,YAAa9N,KAAM,aACtD+N,OAAQ,CAAElB,MAAO,EAAG7M,KAAM,OAC1BgO,SAAU,CAAEnB,MAAOb,EAAQiC,QAAU,EAAI,EAAGjO,KAAM,SAiBpD9D,MAAM,IACD+Q,EACHC,WAjBiBE,EAAA,EAAWN,KAAK,CACjC7O,OAAQ,CACNtD,OAAM,EACNuT,WAAY,cAEdrP,SAAU,CACRlE,OAAM,EACNuT,WAAY,kBAWdf,UARgBE,EAAA,EAAUP,KAAK,CAC/B7O,OChCO,m6BDiCPY,SFjCS,2zBEkCTb,KAAM,gBAMNqO,gBAAgB,EAChB8B,UAAW,CACTT,iBACAU,aAAcxF,EAAOlO,QAAQC,UAGjCnB,KAAKoP,OAASA,EACdpP,KAAK6U,eAAiBb,CACxB,CACA,WAAIS,CAAQpB,GACVrT,KAAK2U,UAAUT,eAAeY,SAASN,SAAWnB,EAAQ,EAAI,CAChE,CACA,WAAIoB,GACF,OAA2D,IAApDzU,KAAK2U,UAAUT,eAAeY,SAASN,QAChD,CACA,KAAAzB,CAAMC,EAAeC,EAAOC,EAAQC,GAClCnT,KAAK6U,eAAe3T,QAAUlB,KAAKoP,OAAOlO,QAC1C8R,EAAc+B,sBACZ/U,KAAK2U,UAAUT,eAAeY,SAASV,cACvCpU,KAAKoP,QACL4F,QAAQhV,KAAK6U,eAAeI,UAC9BjV,KAAK2U,UAAUC,aAAe5U,KAAKoP,OAAOlO,QAAQC,OAClD6R,EAAcI,YAAYpT,KAAMiT,EAAOC,EAAQC,EACjD,E,4CEnDF,MAAM+B,EAAa,IAAIpH,EAAA,EACvB,MAAMqH,UAAwBC,EAAA,EAC5B,WAAAtV,GACE4C,QACA1C,KAAKqV,QAAU,CAAC,IAAItB,EAAW,CAC7B3E,OAAQ,IAAIkG,EAAA,EAAOC,EAAA,EAAQC,OAC3Bf,SAAS,EACT1T,WAAY,UACZC,UAAW,YAEf,CACA,UAAIoO,GACF,OAAOpP,KAAKqV,QAAQ,GAAGjG,MACzB,CACA,UAAIA,CAAOiE,GACTrT,KAAKqV,QAAQ,GAAGjG,OAASiE,CAC3B,CACA,WAAIoB,GACF,OAAOzU,KAAKqV,QAAQ,GAAGZ,OACzB,CACA,WAAIA,CAAQpB,GACVrT,KAAKqV,QAAQ,GAAGZ,QAAUpB,CAC5B,EAEF,MAAMoC,EACJ,WAAA3V,CAAY0F,GACVxF,KAAK0V,iBAAmB,GACxB1V,KAAKyF,UAAYD,CACnB,CACA,IAAA5E,CAAK+U,EAAMC,EAAiB7P,GAC1B,MAAMP,EAAWxF,KAAKyF,UAWtB,GAVAD,EAASQ,YAAYC,MAAMC,MAAMH,GACjCA,EAAeI,IAAI,CACjBc,aAAc,YACdgL,OAAQ,gBACR0D,OACAlB,QAASmB,EAAgBC,aAAapB,QACtCqB,WAAW,EACXF,oBAEFD,EAAKlB,QAAUmB,EAAgBC,aAAapB,QACxCkB,EAAKI,oBAAqB,CAC5B,MAAMC,EAAgBL,EAAKA,KAC3BK,EAAcC,gBAAiB,EAC/BD,EAAcE,mBACZnQ,EACAP,EACA,MAEFwQ,EAAcC,gBAAiB,CACjC,CACAzQ,EAASQ,YAAYC,MAAMC,MAAMH,GACjCA,EAAeI,IAAI,CACjBc,aAAc,YACdgL,OAAQ,cACR0D,OACAC,kBACAnB,QAASmB,EAAgBC,aAAapB,QACtCqB,WAAW,GAEf,CACA,GAAA5M,CAAIyM,EAAMQ,EAAkBpQ,GACT/F,KAAKyF,UACbO,YAAYC,MAAMC,MAAMH,GACjCA,EAAeI,IAAI,CACjBc,aAAc,YACdgL,OAAQ,aACR0D,OACAlB,QAAS0B,EAAiBN,aAAapB,QACvCqB,WAAW,GAEf,CACA,OAAA1P,CAAQY,GACN,MAAMxB,EAAWxF,KAAKyF,UAChB2Q,EAAapP,EAAY2O,KAAKI,oBACpC,GAA2B,kBAAvB/O,EAAYiL,OAA4B,CAC1C,MAAMoE,EAAe,IAAQvO,IAAIqN,GAEjC,GADAkB,EAAa5B,QAAUzN,EAAYyN,QAC/B2B,EAAY,CACdpP,EAAY2O,KAAKA,KAAKW,YAAa,EACnC,MAAMlO,GAAS,EAAAmO,EAAA,GAAgBvP,EAAY2O,KAAKA,MAAM,EAAMT,GAC5DlO,EAAY2O,KAAKA,KAAKW,YAAa,EACnClO,EAAO+E,OACP,MAAMqJ,EAAqBhR,EAASqD,aAAaA,aAAaxH,aAAaF,OACrEsV,EAAgBpJ,EAAA,EAAYK,kBAChCtF,EAAOvH,MACPuH,EAAOtH,OACP0V,EAAmBjV,YACnBiV,EAAmBxV,WAErBwE,EAASqD,aAAajI,KAAK6V,GAAe,GAC1CjR,EAASuD,eAAenI,KAAK,CAC3B6B,OAAQ2F,EACRY,WAAY,aAEd,MAAMoG,EAASiH,EAAajH,OAC5BA,EAAOlO,QAAUuV,EACjBrH,EAAO9E,eAAeoM,GAAKtO,EAAOuO,KAClCvH,EAAO9E,eAAesM,GAAKxO,EAAOyO,KAClC7W,KAAK0V,iBAAiB9U,KAAK,CACzByV,eACAT,gBAAiB5O,EAAY4O,gBAC7Ba,iBAEJ,MACEJ,EAAajH,OAASpI,EAAY2O,KAAKA,KACvC3V,KAAK0V,iBAAiB9U,KAAK,CACzByV,eACAT,gBAAiB5O,EAAY4O,iBAGnC,MAAO,GAA2B,gBAAvB5O,EAAYiL,OAA0B,CAC/C,MAAM6E,EAAW9W,KAAK0V,iBAAiB1V,KAAK0V,iBAAiB5L,OAAS,GAClEsM,IACE5Q,EAASgB,OAAS,IAAauQ,OACjCvR,EAASqD,aAAaI,mBAExBzD,EAASqD,aAAaK,MACtB1D,EAASuD,eAAeG,OAE1B1D,EAASwR,OAAOpW,KAAK,CACnBqG,aAAc,SACdgL,OAAQ,aACRnM,UAAWgR,EAASlB,gBACpBS,aAAcS,EAAST,aACvBP,WAAW,GAEf,MAAO,GAA2B,eAAvB9O,EAAYiL,OAAyB,CAC9CzM,EAASwR,OAAO9N,MAChB,MAAM4N,EAAW9W,KAAK0V,iBAAiBxM,MACnCkN,GACF/I,EAAA,EAAYC,cAAcwJ,EAASL,eAErC,IAAQ7O,OAAOkP,EAAST,aAC1B,CACF,CACA,OAAAjU,GACEpC,KAAKyF,UAAY,KACjBzF,KAAK0V,iBAAmB,IAC1B,EAGFD,EAAclP,UAAY,CACxBC,KAAM,CACJ,KAAcC,WACd,KAAcC,YACd,KAAcC,aAEhBnC,KAAM,aC7JR,MAAMyS,EACJ,WAAAnX,CAAY0F,GACVxF,KAAKkX,YAAc,GACnBlX,KAAKmX,iBAAmB,EACxBnX,KAAKoX,cAAgB,EACrBpX,KAAKyF,UAAYD,CACnB,CACA,UAAAiJ,GACEzO,KAAKkX,YAAY,GAAK,GACtBlX,KAAKmX,iBAAmB,EACxBnX,KAAKoX,cAAgB,EACvB,CACA,IAAAxW,CAAK+U,EAAM0B,EAAYtR,GACJ/F,KAAKyF,UACbO,YAAYC,MAAMC,MAAMH,GACjC,MAAMuR,EAAatX,KAAKkX,YACxBI,EAAWtX,KAAKmX,kBAAoBG,EAAWtX,KAAKmX,iBAAmB,GAAKxB,EAAKA,KACjF,MAAM4B,EAAevX,KAAKkX,YAAYlX,KAAKmX,kBACvCI,IAAiBvX,KAAKoX,gBACxBpX,KAAKoX,cAAgBG,EACrBxR,EAAeI,IAAI,CACjBc,aAAc,YACd0H,UAAW4I,EACXzB,WAAW,KAGf9V,KAAKmX,kBACP,CACA,GAAAjO,CAAIsO,EAAOH,EAAYtR,GACJ/F,KAAKyF,UACbO,YAAYC,MAAMC,MAAMH,GACjC,MAAMuR,EAAatX,KAAKkX,YACxBlX,KAAKmX,mBACL,MAAMI,EAAeD,EAAWtX,KAAKmX,iBAAmB,GACpDI,IAAiBvX,KAAKoX,gBACxBpX,KAAKoX,cAAgBG,EACrBxR,EAAeI,IAAI,CACjBc,aAAc,YACd0H,UAAW4I,EACXzB,WAAW,IAGjB,CACA,OAAA1P,CAAQY,GACWhH,KAAKyF,UACbkJ,UAAU8I,QAAQzQ,EAAY2H,UACzC,CACA,OAAAvM,GACEpC,KAAKkX,YAAc,IACrB,EAGFD,EAAc1Q,UAAY,CACxBC,KAAM,CACJ,KAAcC,WACd,KAAcC,YACd,KAAcC,aAEhBnC,KAAM,a,wBCxDR,MAAMkT,EACJ,WAAA5X,CAAY0F,GAEVxF,KAAK2X,eAAiB,CAAC,EACvB3X,KAAK4X,UAA4B,IAAIC,QACrC7X,KAAKyF,UAAYD,CACnB,CACA,IAAA5E,CAAK+U,EAAM0B,EAAYtR,GACrB,IAAI+R,EACJ,MAAMC,EAASpC,EACTnQ,EAAWxF,KAAKyF,UACtBD,EAASQ,YAAYC,MAAMC,MAAMH,GACjCP,EAASQ,YAAY0I,UAAUsJ,aAAaD,EAAOpC,KAAM,OAAQ5P,GACjEA,EAAeI,IAAI,CACjBc,aAAc,cACdgL,OAAQ,gBACR0D,OACAlB,QAAS4C,EAAWxB,aAAapB,QACjCqB,WAAW,IAEb,MAAME,EAAgB+B,EAAOpC,KAC7BK,EAAcC,gBAAiB,EAC1BjW,KAAK4X,UAAUK,IAAIF,IACtB/X,KAAK4X,UAAUM,IAAIH,EAAQ,CACzBI,kBAAmB,EACnBC,mBAAoB,IAGxB,MAAMtB,EAAW9W,KAAK4X,UAAU9P,IAAIiQ,GACpCjB,EAASqB,kBAAoBpS,EAAegB,gBAC5CiP,EAAcE,mBACZnQ,EACAP,EACA,MAEFwQ,EAAcC,gBAAiB,EAC/BzQ,EAASQ,YAAYC,MAAMC,MAAMH,GACjCA,EAAeI,IAAI,CACjBc,aAAc,cACdgL,OAAQ,cACR0D,OACAlB,QAAS4C,EAAWxB,aAAapB,QACjCqB,WAAW,IAEb,MAAMsC,EAAqBrS,EAAegB,gBAAkB+P,EAASqB,kBAAoB,EACzFrB,EAASsB,mBAAqBA,EAC9B,MAAMC,EAAkB7S,EAASqD,aAAaA,aAAa5I,KAC1D6X,EAAK9X,KAAK2X,gBAAgBU,KAAqBP,EAAGO,GAAmB,EACxE,CACA,GAAAnP,CAAIyM,EAAM0B,EAAYtR,GACpB,MAAMgS,EAASpC,EACTnQ,EAAWxF,KAAKyF,UACtBD,EAASQ,YAAYC,MAAMC,MAAMH,GACjCP,EAASQ,YAAY0I,UAAUsJ,aAAaD,EAAOpC,KAAM,OAAQ5P,GACjEA,EAAeI,IAAI,CACjBc,aAAc,cACdgL,OAAQ,eACRwC,QAAS4C,EAAWxB,aAAapB,QACjCqB,WAAW,IAEb,MAAMgB,EAAW9W,KAAK4X,UAAU9P,IAAI6N,GACpC,IAAK,IAAIhV,EAAI,EAAGA,EAAImW,EAASsB,mBAAoBzX,IAC/CoF,EAAee,aAAaf,EAAegB,mBAAqBhB,EAAee,aAAagQ,EAASqB,qBAEvGpS,EAAeI,IAAI,CACjBc,aAAc,cACdgL,OAAQ,aACR6D,WAAW,GAEf,CACA,OAAA1P,CAAQY,GACN,IAAI8Q,EACJ,MAAMtS,EAAWxF,KAAKyF,UAChB4S,EAAkB7S,EAASqD,aAAaA,aAAa5I,IAC3D,IAAIqY,GAAkBR,EAAK9X,KAAK2X,gBAAgBU,KAAqBP,EAAGO,GAAmB,GAChE,kBAAvBrR,EAAYiL,QACdzM,EAASqD,aAAa0P,qBACtB/S,EAAS/E,QAAQ+X,eAAe,IAAchV,mBAAoB8U,GAClEA,IACA9S,EAASmJ,UAAU8I,QAAQ,IACK,gBAAvBzQ,EAAYiL,QACjBjL,EAAYyN,QACdjP,EAAS/E,QAAQ+X,eAAe,IAAczU,oBAAqBuU,GAEnE9S,EAAS/E,QAAQ+X,eAAe,IAAc1U,YAAawU,GAE7D9S,EAASmJ,UAAU8I,QAAQ,KACK,iBAAvBzQ,EAAYiL,QACrBzM,EAASmJ,UAAU8I,QAAQ,GACJ,IAAnBa,EACF9S,EAAS/E,QAAQ+X,eAAe,IAAc3U,sBAAuByU,IAErE9S,EAASqD,aAAa4P,MAAM,KAAM,IAAMC,SACxClT,EAAS/E,QAAQ+X,eAAe,IAAcnV,SAAUiV,IAE1DA,KACgC,eAAvBtR,EAAYiL,SACjBjL,EAAYyN,QACdjP,EAAS/E,QAAQ+X,eAAe,IAAczU,oBAAqBuU,GAEnE9S,EAAS/E,QAAQ+X,eAAe,IAAc1U,YAAawU,GAE7D9S,EAASmJ,UAAU8I,QAAQ,KAE7BzX,KAAK2X,eAAeU,GAAmBC,CACzC,CACA,OAAAlW,GACEpC,KAAKyF,UAAY,KACjBzF,KAAK2X,eAAiB,KACtB3X,KAAK4X,UAAY,IACnB,EAEFF,EAAgBnR,UAAY,CAC1BC,KAAM,CACJ,KAAcC,WACd,KAAcC,YACd,KAAcC,aAEhBnC,KAAM,e,uBCtHR,MAAMmU,EAAoB,MAAMA,EAC9B,WAAA7Y,GACEE,KAAK4Y,mBAAoB,EACzB5Y,KAAK6Y,iBAAmB,IAAIC,EAAA,EAAM,GAClC9Y,KAAK+Y,MAAQ/Y,KAAK6Y,iBAClB7Y,KAAKmF,MAAQ,CACf,CAKA,IAAAwL,CAAK6B,GACHA,EAAU,IAAKmG,EAAkBnY,kBAAmBgS,GACpDxS,KAAK4Y,kBAAoBpG,EAAQoG,kBACjC5Y,KAAK+Y,MAAQvG,EAAQwG,YAAcxG,EAAQyG,iBAAmBjZ,KAAK6Y,iBACnE7Y,KAAKmF,MAAQqN,EAAQ0G,gBACrBlZ,KAAK6Y,iBAAiBM,SAAS3G,EAAQ0G,gBACzC,CAEA,SAAIH,GACF,OAAO/Y,KAAK6Y,gBACd,CACA,SAAIE,CAAM1F,GACSyF,EAAA,EAAMM,OAAOC,SAAShG,GAC1BlO,MAAQ,GAAqC,IAAhCnF,KAAK6Y,iBAAiB1T,QAC9C,EAAAmU,EAAA,GACE,gJAGJtZ,KAAK6Y,iBAAiBQ,SAAShG,EACjC,CAEA,SAAIlO,GACF,OAAOnF,KAAK6Y,iBAAiB1T,KAC/B,CACA,SAAIA,CAAMkO,GACRrT,KAAK6Y,iBAAiBM,SAAS9F,EACjC,CAEA,aAAIkG,GACF,OAAOvZ,KAAK6Y,iBAAiBW,SAC/B,CAKA,OAAApX,GACA,GAGFuW,EAAkBpS,UAAY,CAC5BC,KAAM,CACJ,KAAcwI,YACd,KAAcC,aACd,KAAcC,cAEhB1K,KAAM,aACNiV,SAAU,GAGZd,EAAkBnY,eAAiB,CAKjC0Y,gBAAiB,EAKjBD,gBAAiB,EAKjBL,mBAAmB,GAErB,IAAIc,GAAmBf,EC7EvB,MAAMgB,GAAqB,CAAC,EAC5B,KAAWC,OAAO,KAAcC,UAAYxG,IAC1C,IAAKA,EAAM7O,KACT,MAAM,IAAIsV,MAAM,iDAElBH,GAAmBtG,EAAM7O,MAAQ6O,EAAM0G,KACrC1G,WACKsG,GAAmBtG,EAAM7O,QAElC,MAAMwV,GACJ,WAAAla,CAAY0F,GACVxF,KAAKia,aAAc,EACnBja,KAAKka,YAA8B3J,OAAOC,OAAO,MACjDxQ,KAAKyF,UAAYD,EACjBxF,KAAKyF,UAAU0U,QAAQC,UAAUjU,IAAInG,KACvC,CACA,SAAAoa,GACEpa,KAAKqa,iBAAmB,SACxBra,KAAKia,aAAc,CACrB,CAOA,YAAAjC,CAAahQ,EAAY0G,EAAW3I,GAC9B/F,KAAKqa,mBAAqB3L,GAK9B1O,KAAKqa,iBAAmB3L,EACpB1O,KAAKia,aACPja,KAAKsa,sBAAsBvU,GAE7B/F,KAAKia,cAAgBN,GAAmBjL,GACpC1O,KAAKia,cACPja,KAAKua,wBAAwBxU,GAC7B/F,KAAKwa,gBAAgB5Z,KAAKoH,KAXtBhI,KAAKia,aACPja,KAAKwa,gBAAgB5Z,KAAKoH,EAYhC,CACA,uBAAAuS,CAAwBxU,GACtB/F,KAAKyF,UAAUO,YAAYC,MAAMC,MAAMH,GACvC,MAAM2I,EAAY1O,KAAKqa,iBACvB,IAAKV,GAAmBjL,GAEtB,YADA,EAAA4K,EAAA,GAAK,gCAAgC5K,sEAGvC,IAAI2H,EAAerW,KAAKka,YAAYxL,GAC/B2H,IACHA,EAAerW,KAAKka,YAAYxL,GAAa,IAAI0G,EAAA,EACjDiB,EAAahB,QAAU,CAAC,IAAIsE,GAAmBjL,KAEjD,MAAM1H,EAAc,CAClBC,aAAc,SACdgL,OAAQ,aACRwI,YAAa,GACbpE,eACAP,WAAW,GAEb9V,KAAKwa,gBAAkBxT,EAAYyT,YACnC1U,EAAeI,IAAIa,EACrB,CACA,qBAAAsT,CAAsBvU,GACpB/F,KAAKwa,gBAAkB,KACvBxa,KAAKyF,UAAUO,YAAYC,MAAMC,MAAMH,GACvCA,EAAeI,IAAI,CACjBc,aAAc,SACdgL,OAAQ,YACR6D,WAAW,GAEf,CAKA,UAAArH,GACEzO,KAAKia,aAAc,CACrB,CAOA,QAAAlL,CAAShJ,GACH/F,KAAKia,aACPja,KAAKsa,sBAAsBvU,EAE/B,CAEA,OAAA3D,GACEpC,KAAKyF,UAAY,KACjBzF,KAAKwa,gBAAkB,KACvB,IAAK,MAAM7Z,KAAKX,KAAKka,YACnBla,KAAKka,YAAYvZ,GAAGyB,UAEtBpC,KAAKka,YAAc,IACrB,EAGFF,GAAczT,UAAY,CACxBC,KAAM,CACJ,KAAcC,WACd,KAAcC,YACd,KAAcC,aAEhBnC,KAAM,a,eC3GR,MAAMkW,GAAa,CACjBC,IAAK,YACLC,IAAK,aACLC,KAAM,cAEFC,GAAiB,MAAMA,EAE3B,WAAAhb,CAAY0F,GACVxF,KAAKyF,UAAYD,CACnB,CACA,iBAAAuV,CAAkBvI,EAASwI,EAAW,CAAC,GACrC,OAAIxI,aAAmBxI,EAAA,IAAawI,aAAmB+C,EAAA,EAC9C,CACL0F,OAAQzI,KACLwI,GAGA,IACFA,KACAxI,EAEP,CAiCA,WAAM0I,CAAM1I,GACV,MAAM0I,EAAQ,KAAWpT,MAAMqT,cAE/B,OADAD,EAAME,UAAYpb,KAAKqb,OAAO7I,GACvB0I,CACT,CAiCA,YAAMG,CAAO7I,GACXA,EAAUxS,KAAK+a,kBACbvI,EACAsI,EAAeQ,qBAEjB,MAAM,OAAEvZ,EAAM,QAAEwZ,GAAY/I,EACtBgJ,EAASxb,KAAKwb,OAAOhJ,GAC3B,QAAsB,IAAlBgJ,EAAOC,OACT,OAAO,IAAIC,QAAQ,CAACC,EAASC,KAC3BJ,EAAOC,OAAQI,IACb,IAAKA,EAEH,YADAD,EAAO,IAAI9B,MAAM,2BAGnB,MAAMgC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,IAAML,EAAQG,EAAOG,QACrCH,EAAOI,QAAUN,EACjBE,EAAOK,cAAcN,IACpBnB,GAAW3Y,GAASwZ,KAG3B,QAAyB,IAArBC,EAAOY,UACT,OAAOZ,EAAOY,UAAU1B,GAAW3Y,GAASwZ,GAE9C,QAA6B,IAAzBC,EAAOa,cAA0B,CACnC,MAAMR,QAAaL,EAAOa,cAAc,CAAE7V,KAAMkU,GAAW3Y,GAASwZ,YACpE,OAAO,IAAIG,QAAQ,CAACC,EAASC,KAC3B,MAAME,EAAS,IAAIC,WACnBD,EAAOE,OAAS,IAAML,EAAQG,EAAOG,QACrCH,EAAOI,QAAUN,EACjBE,EAAOK,cAAcN,IAEzB,CACA,MAAM,IAAI/B,MAAM,0GAClB,CAyCA,MAAA0B,CAAOhJ,GAEL,MAAMyI,GADNzI,EAAUxS,KAAK+a,kBAAkBvI,IACVyI,OACjBzV,EAAWxF,KAAKyF,UACtB,GAAIwV,aAAkB1F,EAAA,EACpB,OAAO/P,EAAStE,QAAQob,eAAerB,GAEzC,MAAM/Z,EAAUsE,EAAS+W,iBAAiBC,gBAAgBhK,GACpDgJ,EAAShW,EAAStE,QAAQob,eAAepb,GAE/C,OADAA,EAAQkB,SAAQ,GACToZ,CACT,CA+BA,MAAAiB,CAAOjK,GAEL,MAAMyI,GADNzI,EAAUxS,KAAK+a,kBAAkBvI,IACVyI,OACjBzV,EAAWxF,KAAKyF,UAChBvE,EAAU+Z,aAAkB1F,EAAA,EAAU0F,EAASzV,EAAS+W,iBAAiBC,gBAAgBhK,GACzFkK,EAAYlX,EAAStE,QAAQyb,UAAUzb,GAI7C,OAHI+Z,aAAkBjR,EAAA,IACpB9I,EAAQkB,SAAQ,GAEXsa,CACT,CA4CA,OAAAxb,CAAQsR,GAEN,OADAA,EAAUxS,KAAK+a,kBAAkBvI,IACrByI,kBAAkB1F,EAAA,EACrB/C,EAAQyI,OACVjb,KAAKyF,UAAU8W,iBAAiBC,gBAAgBhK,EACzD,CA6CA,QAAAoK,CAASpK,GACPA,EAAUxS,KAAK+a,kBAAkBvI,GACjC,MAAMgJ,EAASxb,KAAKwb,OAAOhJ,GACrBqK,EAAOC,SAASC,cAAc,KACpCF,EAAKD,SAAWpK,EAAQwK,UAAY,YACpCH,EAAKI,KAAOzB,EAAOY,UAAU,aAC7BU,SAASI,KAAKC,YAAYN,GAC1BA,EAAKO,QACLN,SAASI,KAAKG,YAAYR,EAC5B,CAiBA,GAAAS,CAAI9K,GACF,MAAM3R,EAAQ2R,EAAQ3R,OAAS,IAC/B2R,EAAUxS,KAAK+a,kBAAkBvI,GACjC,MAAMgJ,EAASxb,KAAKwb,OAAOhJ,GACrB6I,EAASG,EAAOY,YACtBmB,QAAQD,IAAI,kBAAkB9B,EAAO3a,WAAW2a,EAAO1a,YACvD,MAAM8M,EAAQ,CACZ,kBACA,YAAY/M,aACZ,mBAAmBwa,gBACnB,6BACAmC,KAAK,KACPD,QAAQD,IAAI,MAAO1P,EACrB,CACA,OAAAxL,GACEpC,KAAKyF,UAAY,IACnB,GAGFqV,GAAevU,UAAY,CACzBC,KAAM,CACJ,KAAcwI,YACd,KAAcC,cAEhBzK,KAAM,WAcRsW,GAAeQ,oBAAsB,CACnCvZ,OAAQ,MACRwZ,QAAS,GAEX,IAAIkC,GAAgB3C,G,oCC9XpB,MAAM4C,WAAsBnI,EAAA,EAC1B,aAAO/E,CAAOgC,GACZ,OAAO,IAAIkL,GAAc,CACvBvc,OAAQ,IAAIwc,GAAA,EAAcnL,IAE9B,CAQA,MAAAlR,CAAOT,EAAOC,EAAQC,GAEpB,OADAf,KAAKmB,OAAOG,OAAOT,EAAOC,EAAQC,GAC3Bf,IACT,ECVF,MAAM4d,GAAW,IAAIC,GAAA,EACf,GAAa,IAAI/P,EAAA,EACjBgQ,GAAU,CAAC,EAAG,EAAG,EAAG,GAC1B,MAAMC,GACJ,WAAAje,CAAY0F,GACVxF,KAAKyF,UAAYD,CACnB,CAqCA,eAAAgX,CAAgBhK,GACVA,aAAmBxI,EAAA,KACrBwI,EAAU,CACRyI,OAAQzI,EACR1J,WAAO,EACPkV,qBAAsB,CAAC,EACvBjd,gBAAY,IAGhB,MAAMA,EAAayR,EAAQzR,YAAcf,KAAKyF,UAAU1E,WAClDC,EAAYwR,EAAQxR,WAAahB,KAAKyF,UAAU+H,KAAKxM,UACrD8E,EAAY0M,EAAQyI,OAC1B,IAAIgD,EAAazL,EAAQyL,WAGvBA,EAFEA,EACkBC,MAAMC,QAAQF,IAAqC,IAAtBA,EAAWnU,OACjCmU,EAAanF,EAAA,EAAMM,OAAOC,SAAS4E,GAAYzE,UAE7DsE,GAEf,MAAMM,EAAS5L,EAAQ1J,OAAOuV,OAAOT,MAAa,EAAA1Q,GAAA,GAAepH,EAAW,IAAYwY,UACxFF,EAAOvd,MAAiD,EAAzC0d,KAAKC,IAAIJ,EAAOvd,MAAO,EAAIE,GAC1Cqd,EAAOtd,OAAmD,EAA1Cyd,KAAKC,IAAIJ,EAAOtd,OAAQ,EAAIC,GAC5C,MAAMka,EAASyC,GAAclN,OAAO,IAC/BgC,EAAQwL,qBACXnd,MAAOud,EAAOvd,MACdC,OAAQsd,EAAOtd,OACfC,aACAC,cAEIkH,EAAYf,EAAA,EAAOiS,OAAO1Q,WAAW0V,EAAOzV,GAAIyV,EAAOxV,GAQ7D,OAPA5I,KAAKyF,UAAUa,OAAO,CACpBR,YACAoC,YACA+S,SACAgD,eAEFhD,EAAO9Z,OAAOsd,gBACPxD,CACT,CACA,OAAA7Y,GACEpC,KAAKyF,UAAY,IACnB,EAGFsY,GAAsBxX,UAAY,CAChCC,KAAM,CACJ,KAAcwI,YACd,KAAcC,cAEhBzK,KAAM,oB,qCC7FR,MAAMka,GACJ,WAAA5e,CAAY0F,GACVxF,KAAK2e,YAAc,EACnB3e,KAAK4e,wBAA0B,GAC/B5e,KAAK6e,cAAgB,GACrB7e,KAAK8e,gBAAkB,GACvB9e,KAAK+e,eAAiB,GACtB/e,KAAKgf,kBAAoB,GACzBhf,KAAKyF,UAAYD,CACnB,CACA,KAAAgJ,GACExO,KAAK2e,YAAc,EACnB,IAAK,IAAIhe,EAAI,EAAGA,EAAIX,KAAK8e,gBAAgBhV,OAAQnJ,IAC/CX,KAAK6e,cAAcje,KAAKZ,KAAK8e,gBAAgBne,IAE/C,IAAK,IAAIA,EAAI,EAAGA,EAAIX,KAAKgf,kBAAkBlV,OAAQnJ,IACjDX,KAAK+e,eAAene,KAAKZ,KAAKgf,kBAAkBre,IAElDX,KAAK8e,gBAAgBhV,OAAS,EAC9B9J,KAAKgf,kBAAkBlV,OAAS,CAClC,CACA,KAAA6C,CAAM6F,GACJxS,KAAKwO,QACLxO,KAAKY,KAAK4R,EACZ,CACA,IAAAyM,EAAK,KACHrd,EAAI,iBACJsd,EAAgB,qBAChB1W,EAAoB,WACpBQ,EAAU,OACVvG,IAEA,MAAMoG,EAAe7I,KAAKyF,UAAUoD,aAAaA,aAC3CsW,EAA2Bnf,KAAK2e,YAAc3e,KAAK4e,wBAAwB5e,KAAK2e,YAAc,GAAK,CACvGS,eAAgBvW,EAChBL,qBAAsB,IAAIrB,EAAA,EAC1B6B,WAAY,WACZvG,OAAQ,IAAI4c,GAAA,GAERC,EAAoB,CACxBJ,iBAAkBA,GAAoBlf,KAAKyF,UAAUoD,aAAaqW,iBAClEne,WAAYa,GAAQiH,EAAajH,KACjC4G,qBAAsBA,GAAwB2W,EAAyB3W,qBACvEQ,WAAYA,GAAcmW,EAAyBnW,WACnDvG,OAAQA,GAAU0c,EAAyB1c,OAC3C8c,UAAW,MAEPC,EAAexf,KAAK6e,cAAc3V,OAASlJ,KAAKyf,kBACtDzf,KAAK8e,gBAAgBle,KAAK4e,GAC1B,MAAM1K,EAAW0K,EAAa1K,SAY9B,IAAIyK,EAXJzK,EAAS4K,kBAAoBJ,EAAkBJ,iBAC/CpK,EAAS6K,YAAcL,EAAkBve,WACzC+T,EAAS8K,sBAAsBjV,SAAS2U,EAAkB9W,sBAC1DsM,EAAS8K,sBAAsBlJ,IAAM4I,EAAkB7c,OAAOkG,EAC9DmM,EAAS8K,sBAAsBhJ,IAAM0I,EAAkB7c,OAAOmG,GAC9D,QACE0W,EAAkBtW,WAClB8L,EAAS+K,iBACT,GAEFL,EAAajW,SAETvJ,KAAKyF,UAAUO,YAAY4G,aAC7B2S,EAAYvf,KAAKyF,UAAUO,YAAY4G,aAAakT,oBAAoBN,GAAc,IAEtFD,EAAYvf,KAAK+e,eAAe7V,OAAS,IAAI6W,GAAA,EAC7C/f,KAAKgf,kBAAkBpe,KAAK2e,GAC5BA,EAAUS,YAAYR,EAAc,IAEtCF,EAAkBC,UAAYA,EAC9Bvf,KAAKigB,0BAA4BX,CACnC,CACA,IAAA1e,CAAK4R,GACHxS,KAAKif,KAAKzM,GACVxS,KAAK4e,wBAAwB5e,KAAK2e,eAAiB3e,KAAKigB,yBAC1D,CACA,GAAA/W,GACElJ,KAAKigB,0BAA4BjgB,KAAK4e,0BAA0B5e,KAAK2e,YAAc,GAC/E3e,KAAKyF,UAAUe,OAAS,IAAauQ,OACvC/W,KAAKigB,0BAA0BV,UAAU5K,UAAU,GAAGpL,QAE1D,CACA,aAAIgW,GACF,OAAOvf,KAAKigB,0BAA0BV,SACxC,CACA,qBAAID,GACF,OAAOtf,KAAKigB,yBACd,CACA,gBAAIT,GACF,OAAOxf,KAAKigB,0BAA0BV,UAAU5K,UAAU,EAC5D,CACA,eAAA8K,GAUE,OATuB,IAAItL,EAAA,EAAa,CACtCuL,kBAAmB,CAAErM,MAAO,IAAIlM,EAAA,EAAUX,KAAM,eAChDoZ,sBAAuB,CAAEvM,MAAO,IAAIlM,EAAA,EAAUX,KAAM,eAEpDqZ,iBAAkB,CAAExM,MAAO,IAAI/S,aAAa,GAAIkG,KAAM,aACtDmZ,YAAa,CAAEtM,MAAO,CAAC,EAAG,GAAI7M,KAAM,cACnC,CACD0Z,UAAU,GAGd,CACA,OAAA9d,GACEpC,KAAKyF,UAAY,IACnB,EAGFiZ,GAAoBnY,UAAY,CAC9BC,KAAM,CACJ,KAAcwI,YACd,KAAcC,aACd,KAAcC,cAEhB1K,KAAM,kB,eCvHR,IAAIvE,GAAM,EACV,MAAMkgB,GACJ,WAAArgB,GACEE,KAAKogB,OAAS,GAEdpgB,KAAKqgB,QAAU,CACjB,CAEA,IAAA1P,GACE2P,GAAA,EAAOC,OAAOpa,IAAInG,KAAKwgB,QAASxgB,KAClC,CAQA,MAAAygB,CAAOC,EAAMC,EAAUC,GAAY,GACjC,MAAMC,EAAK5gB,KACX,IAAIwC,EAAS,EAcb,OAbIme,IACF5gB,KAAKqgB,SAAW,IAChB5d,EAASzC,KAAKqgB,SAEhBrgB,KAAKogB,OAAOxf,KAAK,CACf8f,OACAC,WACAhU,MAAOmU,YAAYC,MACnBte,SACAue,KAAMF,YAAYC,MAClBN,QAAQ,EACRI,OAEKA,CACT,CAKA,MAAAI,CAAOJ,GACL,IAAK,IAAIlgB,EAAI,EAAGA,EAAIX,KAAKogB,OAAOtW,OAAQnJ,IACtC,GAAIX,KAAKogB,OAAOzf,GAAGkgB,KAAOA,EAExB,YADA7gB,KAAKogB,OAAOc,OAAOvgB,EAAG,EAI5B,CAKA,OAAA6f,GACE,MAAMO,EAAMD,YAAYC,MACxB,IAAK,IAAIpgB,EAAI,EAAGA,EAAIX,KAAKogB,OAAOtW,OAAQnJ,IAAK,CAC3C,MAAMwgB,EAAOnhB,KAAKogB,OAAOzf,GACzB,GAAIogB,EAAMI,EAAK1e,OAAS0e,EAAKH,MAAQG,EAAKR,SAAU,CAClD,MAAMS,EAAUL,EAAMI,EAAKxU,MAC3BwU,EAAKT,KAAKU,GACVD,EAAKH,KAAOD,CACd,CACF,CACF,CAKA,OAAA3e,GACEke,GAAA,EAAOC,OAAOc,OAAOrhB,KAAKwgB,QAASxgB,MACnCA,KAAKogB,OAAOtW,OAAS,CACvB,EAGFqW,GAAgB5Z,UAAY,CAC1BC,KAAM,CACJ,KAAcwI,YACd,KAAcC,aACd,KAAcC,cAEhB1K,KAAM,YACNiV,SAAU,G,eChFZ,IAAI6H,IAAY,ECChB,MAAMC,GACJ,WAAAzhB,CAAY0F,GACVxF,KAAKyF,UAAYD,CACnB,CAKA,IAAAmL,CAAK6B,GACH,GAAIA,EAAQgP,MAAO,CACjB,IAAIhd,EAAOxE,KAAKyF,UAAUjB,KACtBxE,KAAKyF,UAAUe,OAAS,IAAauQ,QACvCvS,GAAQ,IAAIxE,KAAKyF,UAAUgc,QAAQC,gBDZ3C,SAAkBlb,GAChB,IAAI8a,GAAJ,CAGA,GAAI,KAAWxZ,MAAM6Z,eAAeC,UAAUC,cAAcC,QAAQ,WAAa,EAAG,CAClF,MAAMC,EAAO,CACX,iCAAiC,UAAYvb,gCAG7C,sCACA,sCACA,sCACA,sCACA,sDACA,uDAEFwb,WAAWzE,QAAQD,OAAOyE,EAC5B,MAAWC,WAAWzE,SACpByE,WAAWzE,QAAQD,IAAI,UAAU,WAAa9W,8BAEhD8a,IAAY,CAjBZ,CAkBF,CCPMW,CAASzd,EACX,CACF,ECpBF,SAAS0d,GAAUC,GACjB,IAAIC,GAAQ,EACZ,IAAK,MAAMzhB,KAAKwhB,EACd,GAAe,MAAXA,EAAKxhB,GAAc,CACrByhB,GAAQ,EACR,KACF,CAEF,IAAKA,EACH,OAAOD,EACT,MAAME,EAA6B9R,OAAOC,OAAO,MACjD,IAAK,MAAM7P,KAAKwhB,EAAM,CACpB,MAAM9O,EAAQ8O,EAAKxhB,GACf0S,IACFgP,EAAW1hB,GAAK0S,EAEpB,CACA,OAAOgP,CACT,CACA,SAASC,GAAWC,GAClB,IAAI9f,EAAS,EACb,IAAK,IAAI9B,EAAI,EAAGA,EAAI4hB,EAAIzY,OAAQnJ,IAChB,MAAV4hB,EAAI5hB,GACN8B,IAEA8f,EAAI5hB,EAAI8B,GAAU8f,EAAI5hB,GAI1B,OADA4hB,EAAIzY,QAAUrH,EACP8f,CACT,CDPAhB,GAAYhb,UAAY,CACtBC,KAAM,CACJ,KAAcwI,YACd,KAAcC,aACd,KAAcC,cAEhB1K,KAAM,QACNiV,UAAW,GAGb8H,GAAY/gB,eAAiB,CAE3BghB,OAAO,GEhCT,IAAIgB,GAAmB,EACvB,MAAMC,GAAsB,MAAMA,EAKhC,WAAA3iB,CAAY0F,GAEVxF,KAAK0iB,oBAAsB,GAE3B1iB,KAAK2iB,eAAiB,GAEtB3iB,KAAK4iB,eAAiB,GACtB5iB,KAAKyF,UAAYD,CACnB,CAKA,IAAAmL,CAAK6B,GACHA,EAAU,IAAKiQ,EAAoBjiB,kBAAmBgS,GACtDxS,KAAK6iB,cAAgBrQ,EAAQsQ,0BAC7B9iB,KAAK+iB,WAAavQ,EAAQwQ,sBAC1BhjB,KAAKyS,QAAUD,EAAQyQ,kBACzB,CAKA,WAAIxQ,GACF,QAASzS,KAAKkjB,QAChB,CAMA,WAAIzQ,CAAQY,GACNrT,KAAKyS,UAAYY,IAEjBA,GACFrT,KAAKkjB,SAAWljB,KAAKyF,UAAU0d,UAAU1C,OACvC,IAAMzgB,KAAKojB,MACXpjB,KAAK+iB,YACL,GAEF/iB,KAAKqjB,aAAerjB,KAAKyF,UAAU0d,UAAU1C,OAC3C,KACE,IAAK,MAAM0B,KAAQniB,KAAK2iB,eACtBR,EAAKV,QAAQU,EAAKA,MAAQD,GAAUC,EAAKV,QAAQU,EAAKA,QAG1DniB,KAAK+iB,YAEP/iB,KAAKsjB,cAAgBtjB,KAAKyF,UAAU0d,UAAU1C,OAC5C,KACE,IAAK,MAAM8C,KAASvjB,KAAK4iB,eACvBN,GAAWiB,EAAM9B,QAAQ8B,EAAMpB,QAGnCniB,KAAK+iB,cAGP/iB,KAAKyF,UAAU0d,UAAUlC,OAAOjhB,KAAKkjB,UACrCljB,KAAKyF,UAAU0d,UAAUlC,OAAOjhB,KAAKqjB,cACrCrjB,KAAKyF,UAAU0d,UAAUlC,OAAOjhB,KAAKsjB,gBAEzC,CAMA,cAAAE,CAAe/B,EAASU,GACtBniB,KAAK2iB,eAAe/hB,KAAK,CAAE6gB,UAASU,QACtC,CAMA,eAAAsB,CAAgBhC,EAASU,GACvBniB,KAAK4iB,eAAehiB,KAAK,CAAE6gB,UAASU,QACtC,CAMA,SAAA/H,EAAU,UACRtU,IAEA9F,KAAK0jB,KAAO5C,YAAYC,MACxBjb,EAAUe,YAAY8c,OAASnB,KAC/BxiB,KAAK4jB,yBAAyB9d,EAAUe,YAAaf,EAAUe,YAAY8c,OAC7E,CAKA,aAAA9d,CAAcmC,GACPhI,KAAKyS,WAEoB,IAA1BzK,EAAW6b,YACb7jB,KAAK0iB,oBAAoB9hB,KAAKoH,GAC9BA,EAAW8b,KAAK,YAAa9jB,KAAK+jB,kBAAmB/jB,OAEvDgI,EAAW6b,UAAY7jB,KAAK0jB,KAC9B,CAKA,GAAAN,GACE,MAAMrC,EAAM/gB,KAAK0jB,KACXM,EAAqBhkB,KAAK0iB,oBAC1B1c,EAAchG,KAAKyF,UAAUO,YACnC,IAAIvD,EAAS,EACb,IAAK,IAAI9B,EAAI,EAAGA,EAAIqjB,EAAmBla,OAAQnJ,IAAK,CAClD,MAAMqH,EAAagc,EAAmBrjB,GACtC,GAAmB,OAAfqH,EAAqB,CACvBvF,IACA,QACF,CACA,MAAMoE,EAAcmB,EAAWnB,aAAemB,EAAWsD,kBACnD2Y,EAAcpd,GAAad,gBAAgB4d,SAAW,EAI5D,IAHK9c,GAAa8c,QAAU,KAAOM,IACjCjc,EAAW6b,UAAY9C,GAErBA,EAAM/Y,EAAW6b,UAAY7jB,KAAK6iB,cAAe,CACnD,IAAK7a,EAAWjF,UAAW,CACzB,MAAMmhB,EAAKle,EACPa,IACFA,EAAYoF,oBAAqB,GACnCiY,EAAGlc,EAAWf,cAActB,kBAAkBqC,EAChD,CACAA,EAAW6b,WAAa,EACxBphB,IACAuF,EAAW3F,IAAI,YAAarC,KAAK+jB,kBAAmB/jB,KACtD,MACEgkB,EAAmBrjB,EAAI8B,GAAUuF,CAErC,CACAgc,EAAmBla,QAAUrH,CAC/B,CAEA,OAAAL,GACEpC,KAAKyS,SAAU,EACfzS,KAAKyF,UAAY,KACjBzF,KAAK0iB,oBAAoB5Y,OAAS,EAClC9J,KAAK2iB,eAAe7Y,OAAS,EAC7B9J,KAAK4iB,eAAe9Y,OAAS,CAC/B,CAKA,iBAAAia,CAAkB/b,GAChB,MAAM4B,EAAQ5J,KAAK0iB,oBAAoBZ,QAAQ9Z,GAC3C4B,GAAS,IACX5B,EAAW3F,IAAI,YAAarC,KAAK+jB,kBAAmB/jB,MACpDA,KAAK0iB,oBAAoB9Y,GAAS,KAEtC,CAMA,wBAAAga,CAAyB/c,EAAa8c,GACpC9c,EAAYd,eAAe4d,OAASA,EACpC,IAAK,MAAMtY,KAASxE,EAAY4E,oBAC9BzL,KAAK4jB,yBAAyBvY,EAAOsY,EAEzC,GAMFlB,GAAoBlc,UAAY,CAC9BC,KAAM,CACJ,KAAcwI,YACd,KAAcC,cAEhBzK,KAAM,eACNiV,SAAU,GAMZgJ,GAAoBjiB,eAAiB,CAEnCyiB,oBAAoB,EAEpBH,0BAA2B,IAE3BE,sBAAuB,KAEzB,IAAImB,GAAqB1B,GCzMzB,MAAM2B,GAAmB,MAAMA,EAE7B,WAAAtkB,CAAY0F,GACVxF,KAAKyF,UAAYD,EACjBxF,KAAKqkB,MAAQ,EACbrkB,KAAKskB,WAAa,CACpB,CACA,IAAA3T,CAAK6B,GACHA,EAAU,IAAK4R,EAAiB5jB,kBAAmBgS,GACnDxS,KAAKukB,cAAgB/R,EAAQgS,uBAC7BxkB,KAAKykB,QAAUjS,EAAQkS,mBAAqBlS,EAAQmS,iBACpD3kB,KAAK4kB,OAASpS,EAAQqS,eACxB,CAKA,UAAAC,GACO9kB,KAAKyF,UAAUsf,oBAGpB/kB,KAAKqkB,QACArkB,KAAK4kB,SAEV5kB,KAAKskB,aACDtkB,KAAKskB,WAAatkB,KAAKukB,gBACzBvkB,KAAKskB,WAAa,EAClBtkB,KAAKojB,QAET,CAKA,GAAAA,GACE,MAAM4B,EAAkBhlB,KAAKyF,UAAUvE,QAAQ8jB,gBAC/C,IAAK,IAAIrkB,EAAI,EAAGA,EAAIqkB,EAAgBlb,OAAQnJ,IAAK,CAC/C,MAAMO,EAAU8jB,EAAgBrkB,GAC5BO,EAAQ+jB,oBAAsB/jB,EAAQgkB,UAAYhkB,EAAQ0B,UAAY,GAAK5C,KAAKqkB,MAAQnjB,EAAQ0B,SAAW5C,KAAKykB,UAClHvjB,EAAQ0B,UAAY,EACpB1B,EAAQikB,SAEZ,CACF,CACA,OAAA/iB,GACEpC,KAAKyF,UAAY,IACnB,GAGF2e,GAAiB7d,UAAY,CAC3BC,KAAM,CACJ,KAAcwI,YACd,KAAcC,cAEhBzK,KAAM,aAGR4f,GAAiB5jB,eAAiB,CAKhCqkB,iBAAiB,EAKjBH,kBAAmB,KAKnBC,iBAAkB,KAKlBH,uBAAwB,KAE1B,IAAIY,GAAkBhB,G,oCC1EtB,MAAMiB,GAAc,MAAMA,EAMxB,eAAIC,GACF,OAAOtlB,KAAKkB,QAAQC,OAAOmkB,WAC7B,CACA,eAAIA,CAAYjS,GACdrT,KAAKkB,QAAQC,OAAOmkB,YAAcjS,CACpC,CAEA,cAAItS,GACF,OAAOf,KAAKkB,QAAQC,OAAOI,WAC7B,CACA,cAAIR,CAAWsS,GACbrT,KAAKkB,QAAQC,OAAOG,OAClBtB,KAAKkB,QAAQC,OAAON,MACpBb,KAAKkB,QAAQC,OAAOL,OACpBuS,EAEJ,CAKA,IAAA1C,CAAK6B,IACHA,EAAU,IACL6S,EAAY7kB,kBACZgS,IAEOhF,QACV,EAAA+X,GAAA,IAAY,MAAQ,yDACpB/S,EAAQgJ,OAAShJ,EAAQhF,MAE3BxN,KAAKwlB,OAAS,IAAI3H,GAAA,EAAU,EAAG,EAAGrL,EAAQ3R,MAAO2R,EAAQ1R,QACzDd,KAAKwb,OAAShJ,EAAQgJ,QAAU,KAAW1T,MAAM2d,eACjDzlB,KAAKgB,YAAcwR,EAAQxR,UAC3BhB,KAAKkB,SAAU,EAAAwkB,GAAA,GAAiB1lB,KAAKwb,OAAQhJ,GAC7CxS,KAAK6I,aAAe,IAAIvG,GAAA,EAAa,CACnCpC,cAAe,CAACF,KAAKkB,SACrBR,QAAS8R,EAAQ9R,MACjBN,QAAQ,IAEVJ,KAAKkB,QAAQC,OAAOwkB,YAAcnT,EAAQ0G,gBAAkB,EAC5DlZ,KAAKe,WAAayR,EAAQzR,UAC5B,CAOA,MAAAO,CAAOskB,EAAoBC,EAAqB9kB,GAC9Cf,KAAKkB,QAAQC,OAAOG,OAAOskB,EAAoBC,EAAqB9kB,GACpEf,KAAKwlB,OAAO3kB,MAAQb,KAAKkB,QAAQ4H,MAAMjI,MACvCb,KAAKwlB,OAAO1kB,OAASd,KAAKkB,QAAQ4H,MAAMhI,MAC1C,CASA,OAAAsB,CAAQoQ,GAAU,IACsB,kBAAZA,EAAwBA,EAAYA,GAASsT,aACrD9lB,KAAKwb,OAAOuK,YAC5B/lB,KAAKwb,OAAOuK,WAAW1I,YAAYrd,KAAKwb,OAE5C,GAGF6J,GAAY9e,UAAY,CACtBC,KAAM,CACJ,KAAcwI,YACd,KAAcC,aACd,KAAcC,cAEhB1K,KAAM,OACNiV,SAAU,GAGZ4L,GAAY7kB,eAAiB,CAK3BK,MAAO,IAKPC,OAAQ,IAKRwkB,aAAa,EAKbtkB,WAAW,GC5Fb,MAAMglB,GAAgB,CACpBtM,GACAgF,GACA6C,GD2Fe8D,GCzFf9Y,EACA6Y,GACArH,GACAN,GACA,IACA0G,GACAhE,IAEI8F,GAAoB,CACxBjM,GACA7H,EACAhD,EACA/H,EACAqO,EACAiC,EACAT,EACA1R,E,gDCvCF,SAAS2gB,EAAsBC,EAAaC,EAAYC,EAAyBC,GAC/E,MAAMC,EAAgB,CAAC,gKAQvB,IAAIC,EAAO,EACX,IAAK,IAAI7lB,EAAI,EAAGA,EAAIwlB,EAAYrc,OAAQnJ,IAAK,CAC3C,MAAM8lB,EAAaN,EAAYxlB,GACzB6D,EAAOiiB,EAAWC,KAAKliB,KAC7B,IAAImiB,GAAS,EACTlkB,EAAS,EACb,IAAK,IAAIoH,EAAI,EAAGA,EAAI,IAAeC,OAAQD,IAEzC,GADsB,IAAeA,GACnB+c,KAAKH,EAAWC,MAAO,CACvCjkB,EAASgkB,EAAWhkB,OAAS,EAC7B8jB,EAAc3lB,KACZ,WAAW4D,MACX,aAAa/B,EAAS+jB,KACtB,IAAe3c,GAAGuc,IAAe,IAAevc,GAAGgd,KAErDF,GAAS,EACT,KACF,CAEF,IAAKA,EACH,GAAIF,EAAWC,KAAK9kB,KAAO,EACzBa,EAASgkB,EAAWhkB,OAAS,EAC7B8jB,EAAc3lB,KAAKylB,EAAwBI,EAAYhkB,EAAS+jB,QAC3D,CACL,MAAMM,EAAWR,EAAiBG,EAAWC,KAAKlgB,MAClD/D,EAASgkB,EAAWhkB,OAAS,EAC7B8jB,EAAc3lB,KAEZ,gCACmB4D,qCACG/B,EAAS+jB,2BACnBM,uBAGhB,CAEFN,EAAO/jB,CACT,CACA,MAAMskB,EAAcR,EAAc/I,KAAK,MACvC,OAAO,IAAIwJ,SACT,KACA,OACA,YACA,SACAD,EAEJ,C,mECrDA,MAAME,EACJ,WAAAnnB,CAAYoQ,GAEVlQ,KAAKknB,kBAAoC3W,OAAOC,OAAO,MACvDxQ,KAAK0Q,SAAWR,EAChBlQ,KAAKmnB,cACP,CAMA,YAAAA,GACE,KAAK,SACH,MAAM,IAAIrN,MAAM,2GAEpB,CACA,kBAAAsN,CAAmB5H,GACjB,MAAM6H,EAAcrnB,KAAKsnB,oBAAoB9H,GAC7CA,EAAahd,SAAWgd,EAAahd,OAAS,IAAI,IAAO,CACvDkkB,KAAM,IAAIpmB,aAAa+mB,EAAYE,OAAO3lB,KAAO,GACjD4lB,MAAO,IAAYC,QAAU,IAAYC,WAE7C,CACA,mBAAAJ,CAAoB9H,GAClB,OAAOxf,KAAKknB,kBAAkB1H,EAAamI,aAAe3nB,KAAK4nB,kBAAkBpI,EACnF,CACA,iBAAAoI,CAAkBpI,GAChB,MAAMqI,EAAwBrI,EAAamI,WAC3C,IAAIN,EAAcrnB,KAAKknB,kBAAkBW,GACzC,IAAKR,EAAa,CAChB,MAAMS,EAAWvX,OAAOwX,KAAKvI,EAAawI,mBAAmB/mB,IAAKN,GAAM6e,EAAawI,kBAAkBrnB,IACjG4mB,EAASvnB,KAAK0Q,SAASuX,kBAAkBH,GACzCI,EAAeloB,KAAKmoB,iBAAiBZ,EAAOpB,aAClDkB,EAAcrnB,KAAKknB,kBAAkBW,GAAyB,CAC5DN,SACAW,eAEJ,CACA,OAAOloB,KAAKknB,kBAAkBW,EAChC,CACA,gBAAAM,CAAiBhC,GACf,OAAOnmB,KAAK0Q,SAAS0X,gBAAgBjC,EACvC,CACA,gBAAAkC,CAAiB7I,EAAckH,EAAMjkB,GACnC,MAAM6lB,EAAmBtoB,KAAKsnB,oBAAoB9H,GAClDA,EAAahd,SAAWgd,EAAahd,OAAS,IAAI,IAAO,CACvDkkB,KAAM,IAAIpmB,aAAagoB,EAAiBf,OAAO3lB,KAAO,GACtD4lB,MAAO,IAAYC,QAAU,IAAYC,YAE3C,IAAIa,EAAY,KAOhB,OANK7B,IACHA,EAAOlH,EAAahd,OAAOkkB,KAC3B6B,EAAY/I,EAAahd,OAAO+lB,WAElC9lB,IAAWA,EAAS,GACpB6lB,EAAiBJ,aAAa1I,EAAa1K,SAAU4R,EAAM6B,EAAW9lB,IAC/D,CACT,CACA,kBAAA+lB,CAAmBhJ,GACjB,GAAIA,EAAaU,WAAaV,EAAaiJ,SACzC,OAAO,EACTjJ,EAAaiJ,SAAW,EACxB,MAAMC,EAAS1oB,KAAKqoB,iBAAiB7I,GAErC,OADAA,EAAahd,OAAO+G,SACbmf,CACT,CACA,OAAAtmB,GACEpC,KAAKknB,kBAAoB,IAC3B,E,yDCtEF,SAASyB,EAAiBtf,EAAUuf,GAClC,IAAK,MAAMjoB,KAAK0I,EAASwf,WAAY,CACnC,MAAMC,EAAYzf,EAASwf,WAAWloB,GAChCooB,EAAgBH,EAAcjoB,GAChCooB,GACFD,EAAU/mB,SAAW+mB,EAAU/mB,OAASgnB,EAAchnB,QACtD+mB,EAAUrmB,SAAWqmB,EAAUrmB,OAASsmB,EAActmB,QACtDqmB,EAAUE,WAAaF,EAAUE,SAAWD,EAAcC,YAE1D,OAAK,aAAaroB,qGAEtB,EAGF,SAA8B0I,GAC5B,MAAM,QAAEC,EAAO,WAAEuf,GAAexf,EAC1B4f,EAAa,CAAC,EACdC,EAAY,CAAC,EACnB,IAAK,MAAMrf,KAAKP,EAAS,CACvB,MAAM9G,EAAS8G,EAAQO,GACvBof,EAAWzmB,EAAOvC,KAAO,EACzBipB,EAAU1mB,EAAOvC,KAAO,CAC1B,CACA,IAAK,MAAM4J,KAAKgf,EAAY,CAC1B,MAAMC,EAAYD,EAAWhf,GAC7Bof,EAAWH,EAAUtmB,OAAOvC,OAAQ,OAA2B6oB,EAAU/mB,QAAQonB,MACnF,CACA,IAAK,MAAMtf,KAAKgf,EAAY,CAC1B,MAAMC,EAAYD,EAAWhf,GAC7Bif,EAAUK,SAAWL,EAAUK,OAASF,EAAWH,EAAUtmB,OAAOvC,MACpE6oB,EAAUnc,QAAUmc,EAAUnc,MAAQuc,EAAUJ,EAAUtmB,OAAOvC,MACjEipB,EAAUJ,EAAUtmB,OAAOvC,OAAQ,OAA2B6oB,EAAU/mB,QAAQonB,MAClF,CACF,CArBEC,CAAqB/f,EACvB,C,8HCJA,MAAMggB,EACJ,WAAAvpB,CAAY0F,GAEVxF,KAAKspB,aAAe,IAAIzL,EAAA,EAExB7d,KAAKupB,SAAW,IAAI1L,EAAA,EAKpB7d,KAAKwpB,qBAAuB,IAAIC,EAAA,EAAa,wBAE7CzpB,KAAKkf,iBAAmB,IAAI/X,EAAA,EAE5BnH,KAAK0pB,kBAAoB,CAAC,EAAG,EAAG,EAAG,GAKnC1pB,KAAK2pB,iCAAmD,IAAIC,IAE5D5pB,KAAK6pB,qBAAuCtZ,OAAOC,OAAO,MAM1DxQ,KAAK8pB,mBAAqB,GAC1B9pB,KAAKyF,UAAYD,EACjBA,EAASukB,aAAavG,eAAexjB,KAAM,uBAC7C,CAEA,gBAAAiJ,GACEjJ,KAAKkQ,QAAQjH,iBAAiBjJ,KAAK6I,aACrC,CASA,WAAAmhB,EAAY,OACV/O,EAAM,MACNxC,EAAK,WACLwF,EAAU,MACVnV,IAEA9I,KAAK8pB,mBAAmBhgB,OAAS,EACjC9J,KAAKY,KACHqa,EACAxC,EACAwF,EACAnV,GAEF9I,KAAKspB,aAAa3e,SAAS3K,KAAKupB,UAChCvpB,KAAKiqB,iBAAmBjqB,KAAK6I,aAC7B7I,KAAK+kB,kBCtET,SAA6Blc,GAC3B,MAAMqc,EAAWrc,EAAaxH,aAAaF,OAAO+jB,SAClD,OAAOlD,WAAWkI,mBAAqBhF,aAAoBgF,mBAAqBpN,SAASI,KAAKiN,SAASjF,EACzG,CDmE6BkF,CAAoBpqB,KAAKiqB,kBAClDjqB,KAAKkQ,QAAQkK,YAAYpa,KAAKiqB,iBAChC,CACA,UAAAnF,GACE9kB,KAAKkQ,QAAQ4U,aAAa9kB,KAAKiqB,iBACjC,CAaA,IAAAhL,CAAKoL,EAAe5R,GAAQ,EAAMwF,EAAYnV,GAC5C,MAAMD,EAAe7I,KAAKsqB,gBAAgBD,GACpC1e,EAAY3L,KAAK6I,eAAiBA,EACxC7I,KAAK6I,aAAeA,EACpB7I,KAAKqqB,cAAgBA,EACrB,MAAME,EAAkBvqB,KAAKwqB,mBAAmB3hB,GAC5CA,EAAahH,aAAe0oB,EAAgB1pB,OAASgI,EAAa/G,cAAgByoB,EAAgBzpB,SACpGd,KAAKkQ,QAAQua,sBAAsB5hB,GACnC0hB,EAAgB1pB,MAAQgI,EAAahH,WACrC0oB,EAAgBzpB,OAAS+H,EAAa/G,aAExC,MAAMX,EAAS0H,EAAaxH,aACtBkoB,EAAWvpB,KAAKupB,SAChB1nB,EAAaV,EAAOU,WACpBC,EAAcX,EAAOW,YAI3B,IAHKgH,GAASuhB,aAAyB9U,EAAA,IACrCzM,EAAQuhB,EAAcvhB,OAEpBA,EAAO,CACT,MAAM/H,EAAaI,EAAOI,YAC1BgoB,EAAS5gB,EAAIG,EAAMH,EAAI5H,EAAa,GAAM,EAC1CwoB,EAAS3gB,EAAIE,EAAMF,EAAI7H,EAAa,GAAM,EAC1CwoB,EAAS1oB,MAAQiI,EAAMjI,MAAQE,EAAa,GAAM,EAClDwoB,EAASzoB,OAASgI,EAAMhI,OAASC,EAAa,GAAM,CACtD,MACEwoB,EAAS5gB,EAAI,EACb4gB,EAAS3gB,EAAI,EACb2gB,EAAS1oB,MAAQgB,EACjB0nB,EAASzoB,OAASgB,EAcpB,OElIJ,SAA6B4oB,EAAI/hB,EAAGC,EAAG/H,EAAOC,EAAQ6pB,GACpD,MAAMC,EAAOD,EAAQ,GAAK,EAC1BD,EAAGjiB,WACHiiB,EAAGG,EAAI,EAAIhqB,EAAQ,EACnB6pB,EAAGI,EAAIF,GAAQ,EAAI9pB,EAAS,GAC5B4pB,EAAGhU,IAAM,EFmHL,EEnHagU,EAAGG,EACpBH,EAAG9T,IAAMgU,EFmHL,EEnHgBF,EAAGI,CAEzB,CF8GIC,CACE/qB,KAAKkf,iBACL,EACA,EACAqK,EAAS1oB,MAAQM,EAAOJ,WACxBwoB,EAASzoB,OAASK,EAAOJ,YACxB8H,EAAazI,QAEhBJ,KAAKkQ,QAAQ8a,gBAAgBniB,EAAc4P,EAAOwF,EAAYsL,GAC1D5d,GACF3L,KAAKwpB,qBAAqBvmB,KAAK4F,GAE1BA,CACT,CACA,KAAA4P,CAAMwC,EAAQxC,EAAQ,IAAMwS,IAAKhN,GAC1BxF,IAEDwC,IACFA,EAASjb,KAAKsqB,gBAAgBrP,IAEhCjb,KAAKkQ,QAAQuI,MACXwC,GAAUjb,KAAK6I,aACf4P,EACAwF,EACAje,KAAKupB,UAET,CACA,aAAA2B,GACElrB,KAAK6pB,qBAAuCtZ,OAAOC,OAAO,KAC5D,CAQA,IAAA5P,CAAKypB,EAAe5R,EAAQ,IAAMwS,IAAKhN,EAAYnV,GACjD,MAAMD,EAAe7I,KAAKif,KAAKoL,EAAe5R,EAAOwF,EAAYnV,GAKjE,OAJA9I,KAAK8pB,mBAAmBlpB,KAAK,CAC3BiI,eACAC,UAEKD,CACT,CAEA,GAAAK,GACElJ,KAAK8pB,mBAAmB5gB,MACxB,MAAMiiB,EAA0BnrB,KAAK8pB,mBAAmB9pB,KAAK8pB,mBAAmBhgB,OAAS,GACzF9J,KAAKif,KAAKkM,EAAwBtiB,cAAc,EAAO,KAAMsiB,EAAwBriB,MACvF,CAQA,eAAAwhB,CAAgBD,GAId,OAHIA,EAAce,YAChBf,EAAgBA,EAAclpB,QAEzBnB,KAAK2pB,iCAAiC7hB,IAAIuiB,IAAkBrqB,KAAKqrB,kBAAkBhB,EAC5F,CAwCA,aAAAiB,CAAcC,EAA4BC,EAAoBC,EAAW7pB,EAAM8pB,GACzED,EAAU9iB,EAAI,IAChB/G,EAAKf,OAAS4qB,EAAU9iB,EACxB+iB,EAAW/iB,GAAK8iB,EAAU9iB,EAC1B8iB,EAAU9iB,EAAI,GAEZ8iB,EAAU7iB,EAAI,IAChBhH,EAAKd,QAAU2qB,EAAU7iB,EACzB8iB,EAAW9iB,GAAK6iB,EAAU7iB,EAC1B6iB,EAAU7iB,EAAI,GAEhB,MAAM,WAAE/G,EAAU,YAAEC,GAAgBypB,EAGpC,OAFA3pB,EAAKf,MAAQ0d,KAAKoN,IAAI/pB,EAAKf,MAAOgB,EAAa4pB,EAAU9iB,GACzD/G,EAAKd,OAASyd,KAAKoN,IAAI/pB,EAAKd,OAAQgB,EAAc2pB,EAAU7iB,GACrD5I,KAAKkQ,QAAQob,cAClBC,EACAC,EACAC,EACA7pB,EACA8pB,EAEJ,CAKA,kBAAAnT,GACOvY,KAAK6I,aAAapI,UACrBT,KAAK6I,aAAapI,SAAU,EAC5BT,KAAKkQ,QAAQ8a,gBAAgBhrB,KAAK6I,cAAc,EAAO,KAAM7I,KAAKupB,UAEtE,CAEA,OAAAnnB,GACEpC,KAAKyF,UAAY,KACjBzF,KAAK2pB,iCAAiCxnB,QAAQ,CAAC0G,EAAc+iB,KACvD/iB,IAAiB+iB,GACnB/iB,EAAazG,YAGjBpC,KAAK2pB,iCAAiClR,QACtCzY,KAAK6pB,qBAAuCtZ,OAAOC,OAAO,KAC5D,CACA,iBAAA6a,CAAkBhB,GAChB,IAAIxhB,EAAe,KAwBnB,OAvBIgjB,EAAA,EAAajF,KAAKyD,KACpBA,GAAgB,EAAA3E,EAAA,GAAiB2E,GAAelpB,QAE9CkpB,aAAyB/nB,EAAA,EAC3BuG,EAAewhB,EACNA,aAAyB1M,EAAA,IAClC9U,EAAe,IAAIvG,EAAA,EAAa,CAC9BpC,cAAe,CAACmqB,KAEdA,EAAclpB,kBAAkB0qB,EAAA,IAClChjB,EAAazI,QAAS,GAExBiqB,EAAcvG,KAAK,UAAW,KAC5Bjb,EAAazG,UACbpC,KAAK2pB,iCAAiCmC,OAAOzB,GAC7C,MAAME,EAAkBvqB,KAAK6pB,qBAAqBhhB,EAAa5I,KAC3DsqB,IACFvqB,KAAK6pB,qBAAqBhhB,EAAa5I,KAAO,KAC9CD,KAAKkQ,QAAQ6b,uBAAuBxB,OAI1CvqB,KAAK2pB,iCAAiCzR,IAAImS,EAAexhB,GAClDA,CACT,CACA,kBAAA2hB,CAAmB3hB,GACjB,OAAO7I,KAAK6pB,qBAAqBhhB,EAAa5I,OAASD,KAAK6pB,qBAAqBhhB,EAAa5I,KAAOD,KAAKkQ,QAAQ8b,oBAAoBnjB,GACxI,CACA,UAAAojB,GACEjsB,KAAK6I,aAAe,KACpB7I,KAAKqqB,cAAgB,IACvB,E,kCGzSF,MAAM6B,EAAe,CACnBC,OAAQ,EACRhmB,IAAK,EACLimB,SAAU,EACV5G,OAAQ,EACR6G,QAAS,EACTC,MAAO,EACP,aAAc,EACd,UAAW,EACX,aAAc,EACdX,IAAK,EACLnN,IAAK,IAQD+N,EAAS,MAAMA,EACnB,WAAAzsB,GACEE,KAAK0mB,KAAO,EACZ1mB,KAAK0O,UAAY,SACjB1O,KAAKwsB,cAAgB,EACrBxsB,KAAKysB,OAAQ,EACbzsB,KAAK0sB,WAAY,CACnB,CAKA,SAAID,GACF,SAAsB,EAAZzsB,KAAK0mB,KACjB,CACA,SAAI+F,CAAMpZ,MACW,EAAZrT,KAAK0mB,QAAuBrT,IACjCrT,KAAK0mB,MAAQ,EAEjB,CAKA,WAAIiG,GACF,SAAsB,EAAZ3sB,KAAK0mB,KACjB,CACA,WAAIiG,CAAQtZ,MACS,EAAZrT,KAAK0mB,QAAwBrT,IAClCrT,KAAK0mB,MAAQ,EAEjB,CAEA,YAAIkG,CAASvZ,GACG,SAAVA,GAIJrT,KAAK6sB,SAAU,EACf7sB,KAAK8sB,mBAA+B,UAAVzZ,GAJxBrT,KAAK6sB,SAAU,CAKnB,CACA,YAAID,GACF,OAAK5sB,KAAK6sB,QAGH7sB,KAAK8sB,mBAAqB,QAAU,OAFlC,MAGX,CAKA,WAAID,GACF,SAAsB,EAAZ7sB,KAAK0mB,KACjB,CACA,WAAImG,CAAQxZ,MACS,EAAZrT,KAAK0mB,QAAyBrT,IACnCrT,KAAK0mB,MAAQ,EAEjB,CAKA,aAAIqG,GACF,SAAsB,EAAZ/sB,KAAK0mB,KACjB,CACA,aAAIqG,CAAU1Z,MACO,EAAZrT,KAAK0mB,QAA4BrT,IACtCrT,KAAK0mB,MAAQ,EAEjB,CAKA,aAAIgG,GACF,SAAsB,GAAZ1sB,KAAK0mB,KACjB,CACA,aAAIgG,CAAUrZ,MACO,GAAZrT,KAAK0mB,QAA4BrT,IACtCrT,KAAK0mB,MAAQ,GAEjB,CAKA,sBAAIoG,GACF,SAAsB,GAAZ9sB,KAAK0mB,KACjB,CACA,sBAAIoG,CAAmBzZ,MACF,GAAZrT,KAAK0mB,QAAyBrT,IACnCrT,KAAK0mB,MAAQ,GAEjB,CAMA,aAAIhY,GACF,OAAO1O,KAAKgtB,UACd,CACA,aAAIte,CAAU2E,GACZrT,KAAKysB,MAAkB,SAAVpZ,EACbrT,KAAKgtB,WAAa3Z,EAClBrT,KAAKitB,aAAef,EAAa7Y,IAAU,CAC7C,CAKA,iBAAImZ,GACF,OAAOxsB,KAAKktB,cACd,CACA,iBAAIV,CAAcnZ,GAChBrT,KAAK2sB,UAAYtZ,EACjBrT,KAAKktB,eAAiB7Z,CACxB,CACA,QAAA8Z,GACE,MAAO,iCAAiCntB,KAAK0O,gCAAgC1O,KAAK8sB,8BAA8B9sB,KAAK6sB,qBAAqB7sB,KAAK0sB,2BAA2B1sB,KAAKwsB,gBACjL,CAKA,YAAOnc,GACL,MAAMF,EAAQ,IAAIoc,EAGlB,OAFApc,EAAM4c,WAAY,EAClB5c,EAAMsc,OAAQ,EACPtc,CACT,GAEFoc,EAAOa,UAAYb,EAAOlc,QAC1B,IAAID,EAAQmc,C,kCCzJZ,MAAMc,EAAiB,CAErB,CACE7mB,KAAM,cACNogB,KAAOF,QAEc,IADLA,EAAKrT,MACNwX,EAEfhE,IAAK,+bAYLyG,QAAS,kGAKX,CACE9mB,KAAM,YACNogB,KAAOF,GAAuB,cAAdA,EAAKlgB,MAAsC,IAAdkgB,EAAK9kB,WAAmC,IAArB8kB,EAAKrT,MAAMxS,MAC3EgmB,IAAK,iMAOLyG,QAAS,wYAaX,CACE9mB,KAAM,YACNogB,KAAOF,GAAuB,cAAdA,EAAKlgB,MAAsC,IAAdkgB,EAAK9kB,WAA+B,IAAjB8kB,EAAKrT,MAAM1K,EAC3Eke,IAAK,8GAKLyG,QAAS,qQAWX,CACE9mB,KAAM,YACNogB,KAAOF,GAAuB,cAAdA,EAAKlgB,MAAsC,IAAdkgB,EAAK9kB,WAAiC,IAAnB8kB,EAAKrT,MAAMka,IAC3E1G,IAAK,qMAOLyG,QAAS,oZAaX,CACE9mB,KAAM,YACNogB,KAAOF,GAAuB,cAAdA,EAAKlgB,MAAsC,IAAdkgB,EAAK9kB,WAAiC,IAAnB8kB,EAAKrT,MAAMka,IAC3E1G,IAAK,4JAMLyG,QAAS,oV,kCCnGb,MAAMvlB,EACJ,WAAAjI,GACEE,KAAKuR,YAAc,UACnBvR,KAAKwtB,SAAW,gBAEhBxtB,KAAK8R,cAAgB,EACrB9R,KAAK2R,UAAY,EACjB3R,KAAKytB,YAAa,EAClBztB,KAAK+P,YAAc,EACnB/P,KAAK0tB,gBAAkB,EAEvB1tB,KAAKmJ,SAAW,KAChBnJ,KAAK2tB,OAAS,IAChB,CACA,aAAIjf,GACF,OAAO1O,KAAKgI,WAAWmE,cACzB,CACA,SAAI4M,GACF,OAAO/Y,KAAKgI,WAAWkE,eACzB,CACA,KAAAsC,GACExO,KAAKgI,WAAa,KAClBhI,KAAKkB,QAAU,KACflB,KAAKmJ,SAAW,KAChBnJ,KAAK2tB,OAAS,KACd3tB,KAAKoI,OAAS,IAChB,CACA,OAAAhG,GACA,E,0DCzBF,MAAMwrB,EAA8B,IAAIhE,IACxC,SAASlE,EAAiBlK,EAAQhJ,GAChC,IAAKob,EAAY3V,IAAIuD,GAAS,CAC5B,MAAMta,EAAU,IAAI,IAAQ,CAC1BC,OAAQ,IAAI,IAAa,CACvB+jB,SAAU1J,KACPhJ,MAGDqb,EAAY,KACZD,EAAY9lB,IAAI0T,KAAYta,GAC9B0sB,EAAY9B,OAAOtQ,IAGvBta,EAAQ4iB,KAAK,UAAW+J,GACxB3sB,EAAQC,OAAO2iB,KAAK,UAAW+J,GAC/BD,EAAY1V,IAAIsD,EAAQta,EAC1B,CACA,OAAO0sB,EAAY9lB,IAAI0T,EACzB,C","sources":["webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTarget.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/buffer/BufferResource.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/gpu/state/GpuStencilModesToPixi.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uboSyncFunctions.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/localUniformBit.mjs","webpack://card-deck/./node_modules/pixi.js/lib/scene/graphics/gpu/colorToUniform.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/textureBit.mjs","webpack://card-deck/./node_modules/pixi.js/lib/scene/container/CustomRenderPipe.mjs","webpack://card-deck/./node_modules/pixi.js/lib/scene/container/utils/executeInstructions.mjs","webpack://card-deck/./node_modules/pixi.js/lib/scene/container/RenderGroupPipe.mjs","webpack://card-deck/./node_modules/pixi.js/lib/scene/container/utils/clearList.mjs","webpack://card-deck/./node_modules/pixi.js/lib/scene/container/utils/updateRenderGroupTransforms.mjs","webpack://card-deck/./node_modules/pixi.js/lib/scene/container/RenderGroupSystem.mjs","webpack://card-deck/./node_modules/pixi.js/lib/scene/container/utils/validateRenderables.mjs","webpack://card-deck/./node_modules/pixi.js/lib/scene/sprite/SpritePipe.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/batcher/shared/BatcherPipe.mjs","webpack://card-deck/./node_modules/pixi.js/lib/filters/Filter.mjs","webpack://card-deck/./node_modules/pixi.js/lib/filters/mask/mask.frag.mjs","webpack://card-deck/./node_modules/pixi.js/lib/filters/mask/mask.wgsl.mjs","webpack://card-deck/./node_modules/pixi.js/lib/filters/mask/MaskFilter.mjs","webpack://card-deck/./node_modules/pixi.js/lib/filters/mask/mask.vert.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/mask/alpha/AlphaMaskPipe.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/mask/color/ColorMaskPipe.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/mask/stencil/StencilMaskPipe.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/background/BackgroundSystem.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/blendModes/BlendModePipe.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/extract/ExtractSystem.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/texture/RenderTexture.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/extract/GenerateTextureSystem.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/GlobalUniformSystem.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/SchedulerSystem.mjs","webpack://card-deck/./node_modules/pixi.js/lib/utils/sayHello.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/startup/HelloSystem.mjs","webpack://card-deck/./node_modules/pixi.js/lib/utils/data/clean.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/texture/RenderableGCSystem.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureGCSystem.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/view/ViewSystem.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/system/SharedSystems.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/createUboSyncFunction.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/shader/UboSystem.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/ensureAttributes.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTargetSystem.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/isRenderingToScreen.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/calculateProjection.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/state/State.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uniformParsers.mjs","webpack://card-deck/./node_modules/pixi.js/lib/scene/sprite/BatchableSprite.mjs","webpack://card-deck/./node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/getCanvasTexture.mjs"],"sourcesContent":["import { uid } from '../../../../utils/data/uid.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst _RenderTarget = class _RenderTarget {\n  /**\n   * @param [descriptor] - Options for creating a render target.\n   */\n  constructor(descriptor = {}) {\n    /** unique id for this render target */\n    this.uid = uid(\"renderTarget\");\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    this.colorTextures = [];\n    this.dirtyId = 0;\n    this.isRoot = false;\n    this._size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    this._managedColorTextures = false;\n    descriptor = { ..._RenderTarget.defaultOptions, ...descriptor };\n    this.stencil = descriptor.stencil;\n    this.depth = descriptor.depth;\n    this.isRoot = descriptor.isRoot;\n    if (typeof descriptor.colorTextures === \"number\") {\n      this._managedColorTextures = true;\n      for (let i = 0; i < descriptor.colorTextures; i++) {\n        this.colorTextures.push(\n          new TextureSource({\n            width: descriptor.width,\n            height: descriptor.height,\n            resolution: descriptor.resolution,\n            antialias: descriptor.antialias\n          })\n        );\n      }\n    } else {\n      this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n      const colorSource = this.colorTexture.source;\n      this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n    }\n    this.colorTexture.source.on(\"resize\", this.onSourceResize, this);\n    if (descriptor.depthStencilTexture || this.stencil) {\n      if (descriptor.depthStencilTexture instanceof Texture || descriptor.depthStencilTexture instanceof TextureSource) {\n        this.depthStencilTexture = descriptor.depthStencilTexture.source;\n      } else {\n        this.ensureDepthStencilTexture();\n      }\n    }\n  }\n  get size() {\n    const _size = this._size;\n    _size[0] = this.pixelWidth;\n    _size[1] = this.pixelHeight;\n    return _size;\n  }\n  get width() {\n    return this.colorTexture.source.width;\n  }\n  get height() {\n    return this.colorTexture.source.height;\n  }\n  get pixelWidth() {\n    return this.colorTexture.source.pixelWidth;\n  }\n  get pixelHeight() {\n    return this.colorTexture.source.pixelHeight;\n  }\n  get resolution() {\n    return this.colorTexture.source._resolution;\n  }\n  get colorTexture() {\n    return this.colorTextures[0];\n  }\n  onSourceResize(source) {\n    this.resize(source.width, source.height, source._resolution, true);\n  }\n  /**\n   * This will ensure a depthStencil texture is created for this render target.\n   * Most likely called by the mask system to make sure we have stencil buffer added.\n   * @internal\n   */\n  ensureDepthStencilTexture() {\n    if (!this.depthStencilTexture) {\n      this.depthStencilTexture = new TextureSource({\n        width: this.width,\n        height: this.height,\n        resolution: this.resolution,\n        format: \"depth24plus-stencil8\",\n        autoGenerateMipmaps: false,\n        antialias: false,\n        mipLevelCount: 1\n        // sampleCount: handled by the render target system..\n      });\n    }\n  }\n  resize(width, height, resolution = this.resolution, skipColorTexture = false) {\n    this.dirtyId++;\n    this.colorTextures.forEach((colorTexture, i) => {\n      if (skipColorTexture && i === 0)\n        return;\n      colorTexture.source.resize(width, height, resolution);\n    });\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.source.resize(width, height, resolution);\n    }\n  }\n  destroy() {\n    this.colorTexture.source.off(\"resize\", this.onSourceResize, this);\n    if (this._managedColorTextures) {\n      this.colorTextures.forEach((texture) => {\n        texture.destroy();\n      });\n    }\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.destroy();\n      delete this.depthStencilTexture;\n    }\n  }\n};\n/** The default options for a render target */\n_RenderTarget.defaultOptions = {\n  /** the width of the RenderTarget */\n  width: 0,\n  /** the height of the RenderTarget */\n  height: 0,\n  /** the resolution of the RenderTarget */\n  resolution: 1,\n  /** an array of textures, or a number indicating how many color textures there should be */\n  colorTextures: 1,\n  /** should this render target have a stencil buffer? */\n  stencil: false,\n  /** should this render target have a depth buffer? */\n  depth: false,\n  /** should this render target be antialiased? */\n  antialias: false,\n  // save on perf by default!\n  /** is this a root element, true if this is gl context owners render target */\n  isRoot: false\n};\nlet RenderTarget = _RenderTarget;\n\nexport { RenderTarget };\n//# sourceMappingURL=RenderTarget.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid.mjs';\n\n\"use strict\";\nclass BufferResource extends EventEmitter {\n  /**\n   * Create a new Buffer Resource.\n   * @param options - The options for the buffer resource\n   * @param options.buffer - The underlying buffer that this resource is using\n   * @param options.offset - The offset of the buffer this resource is using.\n   * If not provided, then it will use the offset of the buffer.\n   * @param options.size - The size of the buffer this resource is using.\n   * If not provided, then it will use the size of the buffer.\n   */\n  constructor({ buffer, offset, size }) {\n    super();\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = uid(\"buffer\");\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     */\n    this._resourceType = \"bufferResource\";\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     */\n    this._touched = 0;\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     */\n    this._resourceId = uid(\"resource\");\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     */\n    this._bufferResource = true;\n    /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    this.buffer = buffer;\n    this.offset = offset | 0;\n    this.size = size;\n    this.buffer.on(\"change\", this.onBufferChange, this);\n  }\n  onBufferChange() {\n    this._resourceId = uid(\"resource\");\n    this.emit(\"change\", this);\n  }\n  /**\n   * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n   * if you want to destroy it as well, or code will explode\n   * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n   */\n  destroy(destroyBuffer = false) {\n    this.destroyed = true;\n    if (destroyBuffer) {\n      this.buffer.destroy();\n    }\n    this.emit(\"change\", this);\n    this.buffer = null;\n  }\n}\n\nexport { BufferResource };\n//# sourceMappingURL=BufferResource.mjs.map\n","import { STENCIL_MODES } from '../../shared/state/const.mjs';\n\n\"use strict\";\nconst GpuStencilModesToPixi = [];\nGpuStencilModesToPixi[STENCIL_MODES.NONE] = void 0;\nGpuStencilModesToPixi[STENCIL_MODES.DISABLED] = {\n  stencilWriteMask: 0,\n  stencilReadMask: 0\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_ADD] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_REMOVE] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.MASK_ACTIVE] = {\n  stencilWriteMask: 0,\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.INVERSE_MASK_ACTIVE] = {\n  stencilWriteMask: 0,\n  stencilFront: {\n    compare: \"not-equal\",\n    passOp: \"keep\"\n  },\n  stencilBack: {\n    compare: \"not-equal\",\n    passOp: \"keep\"\n  }\n};\n\nexport { GpuStencilModesToPixi };\n//# sourceMappingURL=GpuStencilModesToPixi.mjs.map\n","\"use strict\";\nfunction loopMatrix(col, row) {\n  const total = col * row;\n  return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\nconst uboSyncFunctionsSTD40 = {\n  f32: `\n        data[offset] = v;`,\n  i32: `\n        dataInt32[offset] = v;`,\n  \"vec2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n  \"vec3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n  \"vec4<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n  \"vec2<i32>\": `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];`,\n  \"vec3<i32>\": `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];\n        dataInt32[offset + 2] = v[2];`,\n  \"vec4<i32>\": `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];\n        dataInt32[offset + 2] = v[2];\n        dataInt32[offset + 3] = v[3];`,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n  \"mat3x3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n  \"mat4x4<f32>\": `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n  \"mat3x2<f32>\": loopMatrix(3, 2),\n  \"mat4x2<f32>\": loopMatrix(4, 2),\n  \"mat2x3<f32>\": loopMatrix(2, 3),\n  \"mat4x3<f32>\": loopMatrix(4, 3),\n  \"mat2x4<f32>\": loopMatrix(2, 4),\n  \"mat3x4<f32>\": loopMatrix(3, 4)\n};\nconst uboSyncFunctionsWGSL = {\n  ...uboSyncFunctionsSTD40,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `\n};\n\nexport { uboSyncFunctionsSTD40, uboSyncFunctionsWGSL };\n//# sourceMappingURL=uboSyncFunctions.mjs.map\n","\"use strict\";\nconst localUniformBit = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  }\n};\nconst localUniformBitGroup2 = {\n  ...localUniformBit,\n  vertex: {\n    ...localUniformBit.vertex,\n    // replace the group!\n    header: localUniformBit.vertex.header.replace(\"group(1)\", \"group(2)\")\n  }\n};\nconst localUniformBitGl = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  }\n};\n\nexport { localUniformBit, localUniformBitGl, localUniformBitGroup2 };\n//# sourceMappingURL=localUniformBit.mjs.map\n","\"use strict\";\nfunction colorToUniform(rgb, alpha, out, offset) {\n  out[offset++] = (rgb >> 16 & 255) / 255;\n  out[offset++] = (rgb >> 8 & 255) / 255;\n  out[offset++] = (rgb & 255) / 255;\n  out[offset++] = alpha;\n}\nfunction color32BitToUniform(abgr, out, offset) {\n  const alpha = (abgr >> 24 & 255) / 255;\n  out[offset++] = (abgr & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 8 & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 16 & 255) / 255 * alpha;\n  out[offset++] = alpha;\n}\n\nexport { color32BitToUniform, colorToUniform };\n//# sourceMappingURL=colorToUniform.mjs.map\n","\"use strict\";\nconst textureBit = {\n  name: \"texture-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    )\n  }\n};\nconst textureBitGl = {\n  name: \"texture-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureMatrix;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n        uniform sampler2D uTexture;\n\n\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            outColor = texture(uTexture, vUV);\n        `\n    )\n  }\n};\n\nexport { textureBit, textureBitGl };\n//# sourceMappingURL=textureBit.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass CustomRenderPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  updateRenderable() {\n  }\n  destroyRenderable() {\n  }\n  validateRenderable() {\n    return false;\n  }\n  addRenderable(container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(container);\n  }\n  execute(container) {\n    if (!container.isRenderable)\n      return;\n    container.render(this._renderer);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nCustomRenderPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"customRender\"\n};\n\nexport { CustomRenderPipe };\n//# sourceMappingURL=CustomRenderPipe.mjs.map\n","\"use strict\";\nfunction executeInstructions(renderGroup, renderer) {\n  const instructionSet = renderGroup.instructionSet;\n  const instructions = instructionSet.instructions;\n  for (let i = 0; i < instructionSet.instructionSize; i++) {\n    const instruction = instructions[i];\n    renderer[instruction.renderPipeId].execute(instruction);\n  }\n}\n\nexport { executeInstructions };\n//# sourceMappingURL=executeInstructions.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nclass RenderGroupPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderGroup(renderGroup, instructionSet) {\n    if (renderGroup.isCachedAsTexture) {\n      this._addRenderableCacheAsTexture(renderGroup, instructionSet);\n    } else {\n      this._addRenderableDirect(renderGroup, instructionSet);\n    }\n  }\n  execute(renderGroup) {\n    if (!renderGroup.isRenderable)\n      return;\n    if (renderGroup.isCachedAsTexture) {\n      this._executeCacheAsTexture(renderGroup);\n    } else {\n      this._executeDirect(renderGroup);\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n  _addRenderableDirect(renderGroup, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    if (renderGroup._batchableRenderGroup) {\n      BigPool.return(renderGroup._batchableRenderGroup);\n      renderGroup._batchableRenderGroup = null;\n    }\n    instructionSet.add(renderGroup);\n  }\n  _addRenderableCacheAsTexture(renderGroup, instructionSet) {\n    const batchableRenderGroup = renderGroup._batchableRenderGroup ?? (renderGroup._batchableRenderGroup = BigPool.get(BatchableSprite));\n    batchableRenderGroup.renderable = renderGroup.root;\n    batchableRenderGroup.transform = renderGroup.root.relativeGroupTransform;\n    batchableRenderGroup.texture = renderGroup.texture;\n    batchableRenderGroup.bounds = renderGroup._textureBounds;\n    instructionSet.add(renderGroup);\n    this._renderer.renderPipes.batch.addToBatch(batchableRenderGroup, instructionSet);\n  }\n  _executeCacheAsTexture(renderGroup) {\n    if (renderGroup.textureNeedsUpdate) {\n      renderGroup.textureNeedsUpdate = false;\n      const worldTransformMatrix = tempMatrix.identity().translate(\n        -renderGroup._textureBounds.x,\n        -renderGroup._textureBounds.y\n      );\n      this._renderer.renderTarget.push(renderGroup.texture, true, null, renderGroup.texture.frame);\n      this._renderer.globalUniforms.push({\n        worldTransformMatrix,\n        worldColor: 4294967295\n      });\n      executeInstructions(renderGroup, this._renderer.renderPipes);\n      this._renderer.renderTarget.finishRenderPass();\n      this._renderer.renderTarget.pop();\n      this._renderer.globalUniforms.pop();\n    }\n    renderGroup._batchableRenderGroup._batcher.updateElement(renderGroup._batchableRenderGroup);\n    renderGroup._batchableRenderGroup._batcher.geometry.buffers[0].update();\n  }\n  _executeDirect(renderGroup) {\n    this._renderer.globalUniforms.push({\n      worldTransformMatrix: renderGroup.inverseParentTextureTransform,\n      worldColor: renderGroup.worldColorAlpha\n    });\n    executeInstructions(renderGroup, this._renderer.renderPipes);\n    this._renderer.globalUniforms.pop();\n  }\n}\nRenderGroupPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"renderGroup\"\n};\n\nexport { RenderGroupPipe };\n//# sourceMappingURL=RenderGroupPipe.mjs.map\n","\"use strict\";\nfunction clearList(list, index) {\n  index || (index = 0);\n  for (let j = index; j < list.length; j++) {\n    if (list[j]) {\n      list[j] = null;\n    } else {\n      break;\n    }\n  }\n}\n\nexport { clearList };\n//# sourceMappingURL=clearList.mjs.map\n","import { Container, UPDATE_VISIBLE, UPDATE_COLOR, UPDATE_BLEND } from '../Container.mjs';\nimport { clearList } from './clearList.mjs';\nimport { multiplyColors } from './multiplyColors.mjs';\n\n\"use strict\";\nconst tempContainer = new Container();\nconst UPDATE_BLEND_COLOR_VISIBLE = UPDATE_VISIBLE | UPDATE_COLOR | UPDATE_BLEND;\nfunction updateRenderGroupTransforms(renderGroup, updateChildRenderGroups = false) {\n  updateRenderGroupTransform(renderGroup);\n  const childrenToUpdate = renderGroup.childrenToUpdate;\n  const updateTick = renderGroup.updateTick++;\n  for (const j in childrenToUpdate) {\n    const renderGroupDepth = Number(j);\n    const childrenAtDepth = childrenToUpdate[j];\n    const list = childrenAtDepth.list;\n    const index = childrenAtDepth.index;\n    for (let i = 0; i < index; i++) {\n      const child = list[i];\n      if (child.parentRenderGroup === renderGroup && child.relativeRenderGroupDepth === renderGroupDepth) {\n        updateTransformAndChildren(child, updateTick, 0);\n      }\n    }\n    clearList(list, index);\n    childrenAtDepth.index = 0;\n  }\n  if (updateChildRenderGroups) {\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n    }\n  }\n}\nfunction updateRenderGroupTransform(renderGroup) {\n  const root = renderGroup.root;\n  let worldAlpha;\n  if (renderGroup.renderGroupParent) {\n    const renderGroupParent = renderGroup.renderGroupParent;\n    renderGroup.worldTransform.appendFrom(\n      root.relativeGroupTransform,\n      renderGroupParent.worldTransform\n    );\n    renderGroup.worldColor = multiplyColors(\n      root.groupColor,\n      renderGroupParent.worldColor\n    );\n    worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n  } else {\n    renderGroup.worldTransform.copyFrom(root.localTransform);\n    renderGroup.worldColor = root.localColor;\n    worldAlpha = root.localAlpha;\n  }\n  worldAlpha = worldAlpha < 0 ? 0 : worldAlpha > 1 ? 1 : worldAlpha;\n  renderGroup.worldAlpha = worldAlpha;\n  renderGroup.worldColorAlpha = renderGroup.worldColor + ((worldAlpha * 255 | 0) << 24);\n}\nfunction updateTransformAndChildren(container, updateTick, updateFlags) {\n  if (updateTick === container.updateTick)\n    return;\n  container.updateTick = updateTick;\n  container.didChange = false;\n  const localTransform = container.localTransform;\n  container.updateLocalTransform();\n  const parent = container.parent;\n  if (parent && !parent.renderGroup) {\n    updateFlags |= container._updateFlags;\n    container.relativeGroupTransform.appendFrom(\n      localTransform,\n      parent.relativeGroupTransform\n    );\n    if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE) {\n      updateColorBlendVisibility(container, parent, updateFlags);\n    }\n  } else {\n    updateFlags = container._updateFlags;\n    container.relativeGroupTransform.copyFrom(localTransform);\n    if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE) {\n      updateColorBlendVisibility(container, tempContainer, updateFlags);\n    }\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      updateTransformAndChildren(children[i], updateTick, updateFlags);\n    }\n    const renderGroup = container.parentRenderGroup;\n    const renderable = container;\n    if (renderable.renderPipeId && !renderGroup.structureDidChange) {\n      renderGroup.updateRenderable(renderable);\n    }\n  }\n}\nfunction updateColorBlendVisibility(container, parent, updateFlags) {\n  if (updateFlags & UPDATE_COLOR) {\n    container.groupColor = multiplyColors(\n      container.localColor,\n      parent.groupColor\n    );\n    let groupAlpha = container.localAlpha * parent.groupAlpha;\n    groupAlpha = groupAlpha < 0 ? 0 : groupAlpha > 1 ? 1 : groupAlpha;\n    container.groupAlpha = groupAlpha;\n    container.groupColorAlpha = container.groupColor + ((groupAlpha * 255 | 0) << 24);\n  }\n  if (updateFlags & UPDATE_BLEND) {\n    container.groupBlendMode = container.localBlendMode === \"inherit\" ? parent.groupBlendMode : container.localBlendMode;\n  }\n  if (updateFlags & UPDATE_VISIBLE) {\n    container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n  }\n  container._updateFlags = 0;\n}\n\nexport { updateRenderGroupTransform, updateRenderGroupTransforms, updateTransformAndChildren };\n//# sourceMappingURL=updateRenderGroupTransforms.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { TextureStyle } from '../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport { Bounds } from './bounds/Bounds.mjs';\nimport { clearList } from './utils/clearList.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms.mjs';\nimport { validateRenderables } from './utils/validateRenderables.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nclass RenderGroupSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  render({ container, transform }) {\n    const parent = container.parent;\n    const renderGroupParent = container.renderGroup.renderGroupParent;\n    container.parent = null;\n    container.renderGroup.renderGroupParent = null;\n    const renderer = this._renderer;\n    let originalLocalTransform = tempMatrix;\n    if (transform) {\n      originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n      container.renderGroup.localTransform.copyFrom(transform);\n    }\n    const renderPipes = renderer.renderPipes;\n    this._updateCachedRenderGroups(container.renderGroup, null);\n    this._updateRenderGroups(container.renderGroup);\n    renderer.globalUniforms.start({\n      worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n      worldColor: container.renderGroup.worldColorAlpha\n    });\n    executeInstructions(container.renderGroup, renderPipes);\n    if (renderPipes.uniformBatch) {\n      renderPipes.uniformBatch.renderEnd();\n    }\n    if (transform) {\n      container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n    }\n    container.parent = parent;\n    container.renderGroup.renderGroupParent = renderGroupParent;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n  _updateCachedRenderGroups(renderGroup, closestCacheAsTexture) {\n    if (renderGroup.isCachedAsTexture) {\n      if (!renderGroup.updateCacheTexture)\n        return;\n      closestCacheAsTexture = renderGroup;\n    }\n    renderGroup._parentCacheAsTextureRenderGroup = closestCacheAsTexture;\n    for (let i = renderGroup.renderGroupChildren.length - 1; i >= 0; i--) {\n      this._updateCachedRenderGroups(renderGroup.renderGroupChildren[i], closestCacheAsTexture);\n    }\n    renderGroup.invalidateMatrices();\n    if (renderGroup.isCachedAsTexture) {\n      if (renderGroup.textureNeedsUpdate) {\n        const bounds = renderGroup.root.getLocalBounds();\n        bounds.ceil();\n        const lastTexture = renderGroup.texture;\n        if (renderGroup.texture) {\n          TexturePool.returnTexture(renderGroup.texture, true);\n        }\n        const renderer = this._renderer;\n        const resolution = renderGroup.textureOptions.resolution || renderer.view.resolution;\n        const antialias = renderGroup.textureOptions.antialias ?? renderer.view.antialias;\n        const scaleMode = renderGroup.textureOptions.scaleMode ?? \"linear\";\n        const texture = TexturePool.getOptimalTexture(\n          bounds.width,\n          bounds.height,\n          resolution,\n          antialias\n        );\n        texture._source.style = new TextureStyle({ scaleMode });\n        renderGroup.texture = texture;\n        renderGroup._textureBounds || (renderGroup._textureBounds = new Bounds());\n        renderGroup._textureBounds.copyFrom(bounds);\n        if (lastTexture !== renderGroup.texture) {\n          if (renderGroup.renderGroupParent) {\n            renderGroup.renderGroupParent.structureDidChange = true;\n          }\n        }\n      }\n    } else if (renderGroup.texture) {\n      TexturePool.returnTexture(renderGroup.texture, true);\n      renderGroup.texture = null;\n    }\n  }\n  _updateRenderGroups(renderGroup) {\n    const renderer = this._renderer;\n    const renderPipes = renderer.renderPipes;\n    renderGroup.runOnRender(renderer);\n    renderGroup.instructionSet.renderPipes = renderPipes;\n    if (!renderGroup.structureDidChange) {\n      validateRenderables(renderGroup, renderPipes);\n    } else {\n      clearList(renderGroup.childrenRenderablesToUpdate.list, 0);\n    }\n    updateRenderGroupTransforms(renderGroup);\n    if (renderGroup.structureDidChange) {\n      renderGroup.structureDidChange = false;\n      this._buildInstructions(renderGroup, renderer);\n    } else {\n      this._updateRenderables(renderGroup);\n    }\n    renderGroup.childrenRenderablesToUpdate.index = 0;\n    renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n    if (renderGroup.isCachedAsTexture && !renderGroup.textureNeedsUpdate)\n      return;\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      this._updateRenderGroups(renderGroup.renderGroupChildren[i]);\n    }\n  }\n  _updateRenderables(renderGroup) {\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n    for (let i = 0; i < index; i++) {\n      const container = list[i];\n      if (container.didViewUpdate) {\n        renderGroup.updateRenderable(container);\n      }\n    }\n    clearList(list, index);\n  }\n  _buildInstructions(renderGroup, rendererOrPipes) {\n    const root = renderGroup.root;\n    const instructionSet = renderGroup.instructionSet;\n    instructionSet.reset();\n    const renderer = rendererOrPipes.renderPipes ? rendererOrPipes : rendererOrPipes.batch.renderer;\n    const renderPipes = renderer.renderPipes;\n    renderPipes.batch.buildStart(instructionSet);\n    renderPipes.blendMode.buildStart();\n    renderPipes.colorMask.buildStart();\n    if (root.sortableChildren) {\n      root.sortChildren();\n    }\n    root.collectRenderablesWithEffects(instructionSet, renderer, null);\n    renderPipes.batch.buildEnd(instructionSet);\n    renderPipes.blendMode.buildEnd(instructionSet);\n  }\n}\n/** @ignore */\nRenderGroupSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"renderGroup\"\n};\n\nexport { RenderGroupSystem };\n//# sourceMappingURL=RenderGroupSystem.mjs.map\n","\"use strict\";\nfunction validateRenderables(renderGroup, renderPipes) {\n  const { list, index } = renderGroup.childrenRenderablesToUpdate;\n  let rebuildRequired = false;\n  for (let i = 0; i < index; i++) {\n    const container = list[i];\n    const renderable = container;\n    const pipe = renderPipes[renderable.renderPipeId];\n    rebuildRequired = pipe.validateRenderable(container);\n    if (rebuildRequired) {\n      break;\n    }\n  }\n  renderGroup.structureDidChange = rebuildRequired;\n  return rebuildRequired;\n}\n\nexport { validateRenderables };\n//# sourceMappingURL=validateRenderables.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BatchableSprite } from './BatchableSprite.mjs';\n\n\"use strict\";\nclass SpritePipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    return !gpuSprite._batcher.checkAndUpdateTexture(\n      gpuSprite,\n      sprite._texture\n    );\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    batchableSprite.bounds = sprite.visualBounds;\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return sprite._gpuData[this._renderer.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableSprite = new BatchableSprite();\n    batchableSprite.renderable = sprite;\n    batchableSprite.transform = sprite.groupTransform;\n    batchableSprite.texture = sprite._texture;\n    batchableSprite.bounds = sprite.visualBounds;\n    batchableSprite.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    sprite._gpuData[this._renderer.uid] = batchableSprite;\n    return batchableSprite;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"sprite\"\n};\n\nexport { SpritePipe };\n//# sourceMappingURL=SpritePipe.mjs.map\n","import { ExtensionType, extensions } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../renderers/shared/state/State.mjs';\nimport { DefaultBatcher } from './DefaultBatcher.mjs';\n\n\"use strict\";\nconst _BatcherPipe = class _BatcherPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._batchersByInstructionSet = /* @__PURE__ */ Object.create(null);\n    /** A record of all active batchers, keyed by their names */\n    this._activeBatches = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init?.(this);\n  }\n  static getBatcher(name) {\n    return new this._availableBatchers[name]();\n  }\n  buildStart(instructionSet) {\n    let batchers = this._batchersByInstructionSet[instructionSet.uid];\n    if (!batchers) {\n      batchers = this._batchersByInstructionSet[instructionSet.uid] = /* @__PURE__ */ Object.create(null);\n      batchers.default || (batchers.default = new DefaultBatcher({\n        maxTextures: this.renderer.limits.maxBatchableTextures\n      }));\n    }\n    this._activeBatches = batchers;\n    this._activeBatch = this._activeBatches.default;\n    for (const i in this._activeBatches) {\n      this._activeBatches[i].begin();\n    }\n  }\n  addToBatch(batchableObject, instructionSet) {\n    if (this._activeBatch.name !== batchableObject.batcherName) {\n      this._activeBatch.break(instructionSet);\n      let batch = this._activeBatches[batchableObject.batcherName];\n      if (!batch) {\n        batch = this._activeBatches[batchableObject.batcherName] = _BatcherPipe.getBatcher(batchableObject.batcherName);\n        batch.begin();\n      }\n      this._activeBatch = batch;\n    }\n    this._activeBatch.add(batchableObject);\n  }\n  break(instructionSet) {\n    this._activeBatch.break(instructionSet);\n  }\n  buildEnd(instructionSet) {\n    this._activeBatch.break(instructionSet);\n    const batches = this._activeBatches;\n    for (const i in batches) {\n      const batch = batches[i];\n      const geometry = batch.geometry;\n      geometry.indexBuffer.setDataWithSize(batch.indexBuffer, batch.indexSize, true);\n      geometry.buffers[0].setDataWithSize(batch.attributeBuffer.float32View, batch.attributeSize, false);\n    }\n  }\n  upload(instructionSet) {\n    const batchers = this._batchersByInstructionSet[instructionSet.uid];\n    for (const i in batchers) {\n      const batcher = batchers[i];\n      const geometry = batcher.geometry;\n      if (batcher.dirty) {\n        batcher.dirty = false;\n        geometry.buffers[0].update(batcher.attributeSize * 4);\n      }\n    }\n  }\n  execute(batch) {\n    if (batch.action === \"startBatch\") {\n      const batcher = batch.batcher;\n      const geometry = batcher.geometry;\n      const shader = batcher.shader;\n      this._adaptor.start(this, geometry, shader);\n    }\n    this._adaptor.execute(this, batch);\n  }\n  destroy() {\n    this.state = null;\n    this.renderer = null;\n    this._adaptor = null;\n    for (const i in this._activeBatches) {\n      this._activeBatches[i].destroy();\n    }\n    this._activeBatches = null;\n  }\n};\n/** @ignore */\n_BatcherPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"batch\"\n};\n_BatcherPipe._availableBatchers = /* @__PURE__ */ Object.create(null);\nlet BatcherPipe = _BatcherPipe;\nextensions.handleByMap(ExtensionType.Batcher, BatcherPipe._availableBatchers);\nextensions.add(DefaultBatcher);\n\nexport { BatcherPipe };\n//# sourceMappingURL=BatcherPipe.mjs.map\n","import { GlProgram } from '../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../rendering/renderers/shared/shader/Shader.mjs';\nimport { State } from '../rendering/renderers/shared/state/State.mjs';\n\n\"use strict\";\nconst _Filter = class _Filter extends Shader {\n  /**\n   * @param options - The optional parameters of this filter.\n   */\n  constructor(options) {\n    options = { ..._Filter.defaultOptions, ...options };\n    super(options);\n    /** If enabled is true the filter is applied, if false it will not. */\n    this.enabled = true;\n    /**\n     * The gpu state the filter requires to render.\n     * @internal\n     */\n    this._state = State.for2d();\n    this.blendMode = options.blendMode;\n    this.padding = options.padding;\n    if (typeof options.antialias === \"boolean\") {\n      this.antialias = options.antialias ? \"on\" : \"off\";\n    } else {\n      this.antialias = options.antialias;\n    }\n    this.resolution = options.resolution;\n    this.blendRequired = options.blendRequired;\n    this.clipToViewport = options.clipToViewport;\n    this.addResource(\"uTexture\", 0, 1);\n  }\n  /**\n   * Applies the filter\n   * @param filterManager - The renderer to retrieve the filter from\n   * @param input - The input render target.\n   * @param output - The target to output to.\n   * @param clearMode - Should the output be cleared before rendering to it\n   */\n  apply(filterManager, input, output, clearMode) {\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n  /**\n   * Get the blend mode of the filter.\n   * @default \"normal\"\n   */\n  get blendMode() {\n    return this._state.blendMode;\n  }\n  /** Sets the blend mode of the filter. */\n  set blendMode(value) {\n    this._state.blendMode = value;\n  }\n  /**\n   * A short hand function to create a filter based of a vertex and fragment shader src.\n   * @param options\n   * @returns A shiny new PixiJS filter!\n   */\n  static from(options) {\n    const { gpu, gl, ...rest } = options;\n    let gpuProgram;\n    let glProgram;\n    if (gpu) {\n      gpuProgram = GpuProgram.from(gpu);\n    }\n    if (gl) {\n      glProgram = GlProgram.from(gl);\n    }\n    return new _Filter({\n      gpuProgram,\n      glProgram,\n      ...rest\n    });\n  }\n};\n/** The default filter settings */\n_Filter.defaultOptions = {\n  blendMode: \"normal\",\n  resolution: 1,\n  padding: 0,\n  antialias: \"off\",\n  blendRequired: false,\n  clipToViewport: true\n};\nlet Filter = _Filter;\n\nexport { Filter };\n//# sourceMappingURL=Filter.mjs.map\n","var fragment = \"in vec2 vMaskCoord;\\nin vec2 vTextureCoord;\\n\\nuniform sampler2D uTexture;\\nuniform sampler2D uMaskTexture;\\n\\nuniform float uAlpha;\\nuniform vec4 uMaskClamp;\\nuniform float uInverse;\\n\\nout vec4 finalColor;\\n\\nvoid main(void)\\n{\\n    float clip = step(3.5,\\n        step(uMaskClamp.x, vMaskCoord.x) +\\n        step(uMaskClamp.y, vMaskCoord.y) +\\n        step(vMaskCoord.x, uMaskClamp.z) +\\n        step(vMaskCoord.y, uMaskClamp.w));\\n\\n    // TODO look into why this is needed\\n    float npmAlpha = uAlpha;\\n    vec4 original = texture(uTexture, vTextureCoord);\\n    vec4 masky = texture(uMaskTexture, vMaskCoord);\\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\\n\\n    float a = alphaMul * masky.r * npmAlpha * clip;\\n\\n    if (uInverse == 1.0) {\\n        a = 1.0 - a;\\n    }\\n\\n    finalColor = original * a;\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=mask.frag.mjs.map\n","var source = \"struct GlobalFilterUniforms {\\n  uInputSize:vec4<f32>,\\n  uInputPixel:vec4<f32>,\\n  uInputClamp:vec4<f32>,\\n  uOutputFrame:vec4<f32>,\\n  uGlobalFrame:vec4<f32>,\\n  uOutputTexture:vec4<f32>,\\n};\\n\\nstruct MaskUniforms {\\n  uFilterMatrix:mat3x3<f32>,\\n  uMaskClamp:vec4<f32>,\\n  uAlpha:f32,\\n  uInverse:f32,\\n};\\n\\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\\n@group(0) @binding(2) var uSampler : sampler;\\n\\n@group(1) @binding(0) var<uniform> filterUniforms : MaskUniforms;\\n@group(1) @binding(1) var uMaskTexture: texture_2d<f32>;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) filterUv : vec2<f32>,\\n};\\n\\nfn filterVertexPosition(aPosition:vec2<f32>) -> vec4<f32>\\n{\\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\\n\\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nfn filterTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n    return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\\n}\\n\\nfn globalTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return  (aPosition.xy / gfu.uGlobalFrame.zw) + (gfu.uGlobalFrame.xy / gfu.uGlobalFrame.zw);\\n}\\n\\nfn getFilterCoord(aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return ( filterUniforms.uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}\\n\\nfn getSize() -> vec2<f32>\\n{\\n  return gfu.uGlobalFrame.zw;\\n}\\n\\n@vertex\\nfn mainVertex(\\n  @location(0) aPosition : vec2<f32>,\\n) -> VSOutput {\\n  return VSOutput(\\n   filterVertexPosition(aPosition),\\n   filterTextureCoord(aPosition),\\n   getFilterCoord(aPosition)\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) filterUv: vec2<f32>,\\n  @builtin(position) position: vec4<f32>\\n) -> @location(0) vec4<f32> {\\n\\n    var maskClamp = filterUniforms.uMaskClamp;\\n    var uAlpha = filterUniforms.uAlpha;\\n\\n    var clip = step(3.5,\\n      step(maskClamp.x, filterUv.x) +\\n      step(maskClamp.y, filterUv.y) +\\n      step(filterUv.x, maskClamp.z) +\\n      step(filterUv.y, maskClamp.w));\\n\\n    var mask = textureSample(uMaskTexture, uSampler, filterUv);\\n    var source = textureSample(uTexture, uSampler, uv);\\n    var alphaMul = 1.0 - uAlpha * (1.0 - mask.a);\\n\\n    var a: f32 = alphaMul * mask.r * uAlpha * clip;\\n\\n    if (filterUniforms.uInverse == 1.0) {\\n        a = 1.0 - a;\\n    }\\n\\n    return source * a;\\n}\\n\";\n\nexport { source as default };\n//# sourceMappingURL=mask.wgsl.mjs.map\n","import { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { TextureMatrix } from '../../rendering/renderers/shared/texture/TextureMatrix.mjs';\nimport { Filter } from '../Filter.mjs';\nimport fragment from './mask.frag.mjs';\nimport vertex from './mask.vert.mjs';\nimport source from './mask.wgsl.mjs';\n\n\"use strict\";\nclass MaskFilter extends Filter {\n  constructor(options) {\n    const { sprite, ...rest } = options;\n    const textureMatrix = new TextureMatrix(sprite.texture);\n    const filterUniforms = new UniformGroup({\n      uFilterMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uMaskClamp: { value: textureMatrix.uClampFrame, type: \"vec4<f32>\" },\n      uAlpha: { value: 1, type: \"f32\" },\n      uInverse: { value: options.inverse ? 1 : 0, type: \"f32\" }\n    });\n    const gpuProgram = GpuProgram.from({\n      vertex: {\n        source,\n        entryPoint: \"mainVertex\"\n      },\n      fragment: {\n        source,\n        entryPoint: \"mainFragment\"\n      }\n    });\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment,\n      name: \"mask-filter\"\n    });\n    super({\n      ...rest,\n      gpuProgram,\n      glProgram,\n      clipToViewport: false,\n      resources: {\n        filterUniforms,\n        uMaskTexture: sprite.texture.source\n      }\n    });\n    this.sprite = sprite;\n    this._textureMatrix = textureMatrix;\n  }\n  set inverse(value) {\n    this.resources.filterUniforms.uniforms.uInverse = value ? 1 : 0;\n  }\n  get inverse() {\n    return this.resources.filterUniforms.uniforms.uInverse === 1;\n  }\n  apply(filterManager, input, output, clearMode) {\n    this._textureMatrix.texture = this.sprite.texture;\n    filterManager.calculateSpriteMatrix(\n      this.resources.filterUniforms.uniforms.uFilterMatrix,\n      this.sprite\n    ).prepend(this._textureMatrix.mapCoord);\n    this.resources.uMaskTexture = this.sprite.texture.source;\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n}\n\nexport { MaskFilter };\n//# sourceMappingURL=MaskFilter.mjs.map\n","var vertex = \"in vec2 aPosition;\\n\\nout vec2 vTextureCoord;\\nout vec2 vMaskCoord;\\n\\n\\nuniform vec4 uInputSize;\\nuniform vec4 uOutputFrame;\\nuniform vec4 uOutputTexture;\\nuniform mat3 uFilterMatrix;\\n\\nvec4 filterVertexPosition(  vec2 aPosition )\\n{\\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\\n       \\n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nvec2 filterTextureCoord(  vec2 aPosition )\\n{\\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\\n}\\n\\nvec2 getFilterCoord( vec2 aPosition )\\n{\\n    return  ( uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}   \\n\\nvoid main(void)\\n{\\n    gl_Position = filterVertexPosition(aPosition);\\n    vTextureCoord = filterTextureCoord(aPosition);\\n    vMaskCoord = getFilterCoord(aPosition);\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=mask.vert.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { FilterEffect } from '../../../filters/FilterEffect.mjs';\nimport { MaskFilter } from '../../../filters/mask/MaskFilter.mjs';\nimport { Bounds } from '../../../scene/container/bounds/Bounds.mjs';\nimport { getGlobalBounds } from '../../../scene/container/bounds/getGlobalBounds.mjs';\nimport { Sprite } from '../../../scene/sprite/Sprite.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { Texture } from '../../renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../../renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../renderers/types.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nclass AlphaMaskEffect extends FilterEffect {\n  constructor() {\n    super();\n    this.filters = [new MaskFilter({\n      sprite: new Sprite(Texture.EMPTY),\n      inverse: false,\n      resolution: \"inherit\",\n      antialias: \"inherit\"\n    })];\n  }\n  get sprite() {\n    return this.filters[0].sprite;\n  }\n  set sprite(value) {\n    this.filters[0].sprite = value;\n  }\n  get inverse() {\n    return this.filters[0].inverse;\n  }\n  set inverse(value) {\n    this.filters[0].inverse = value;\n  }\n}\nclass AlphaMaskPipe {\n  constructor(renderer) {\n    this._activeMaskStage = [];\n    this._renderer = renderer;\n  }\n  push(mask, maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskBegin\",\n      mask,\n      inverse: maskedContainer._maskOptions.inverse,\n      canBundle: false,\n      maskedContainer\n    });\n    mask.inverse = maskedContainer._maskOptions.inverse;\n    if (mask.renderMaskToTexture) {\n      const maskContainer = mask.mask;\n      maskContainer.includeInBuild = true;\n      maskContainer.collectRenderables(\n        instructionSet,\n        renderer,\n        null\n      );\n      maskContainer.includeInBuild = false;\n    }\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskEnd\",\n      mask,\n      maskedContainer,\n      inverse: maskedContainer._maskOptions.inverse,\n      canBundle: false\n    });\n  }\n  pop(mask, _maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"popMaskEnd\",\n      mask,\n      inverse: _maskedContainer._maskOptions.inverse,\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    const renderMask = instruction.mask.renderMaskToTexture;\n    if (instruction.action === \"pushMaskBegin\") {\n      const filterEffect = BigPool.get(AlphaMaskEffect);\n      filterEffect.inverse = instruction.inverse;\n      if (renderMask) {\n        instruction.mask.mask.measurable = true;\n        const bounds = getGlobalBounds(instruction.mask.mask, true, tempBounds);\n        instruction.mask.mask.measurable = false;\n        bounds.ceil();\n        const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n        const filterTexture = TexturePool.getOptimalTexture(\n          bounds.width,\n          bounds.height,\n          colorTextureSource._resolution,\n          colorTextureSource.antialias\n        );\n        renderer.renderTarget.push(filterTexture, true);\n        renderer.globalUniforms.push({\n          offset: bounds,\n          worldColor: 4294967295\n        });\n        const sprite = filterEffect.sprite;\n        sprite.texture = filterTexture;\n        sprite.worldTransform.tx = bounds.minX;\n        sprite.worldTransform.ty = bounds.minY;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer,\n          filterTexture\n        });\n      } else {\n        filterEffect.sprite = instruction.mask.mask;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer\n        });\n      }\n    } else if (instruction.action === \"pushMaskEnd\") {\n      const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n      if (renderMask) {\n        if (renderer.type === RendererType.WEBGL) {\n          renderer.renderTarget.finishRenderPass();\n        }\n        renderer.renderTarget.pop();\n        renderer.globalUniforms.pop();\n      }\n      renderer.filter.push({\n        renderPipeId: \"filter\",\n        action: \"pushFilter\",\n        container: maskData.maskedContainer,\n        filterEffect: maskData.filterEffect,\n        canBundle: false\n      });\n    } else if (instruction.action === \"popMaskEnd\") {\n      renderer.filter.pop();\n      const maskData = this._activeMaskStage.pop();\n      if (renderMask) {\n        TexturePool.returnTexture(maskData.filterTexture);\n      }\n      BigPool.return(maskData.filterEffect);\n    }\n  }\n  destroy() {\n    this._renderer = null;\n    this._activeMaskStage = null;\n  }\n}\n/** @ignore */\nAlphaMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"alphaMask\"\n};\n\nexport { AlphaMaskPipe };\n//# sourceMappingURL=AlphaMaskPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ColorMaskPipe {\n  constructor(renderer) {\n    this._colorStack = [];\n    this._colorStackIndex = 0;\n    this._currentColor = 0;\n    this._renderer = renderer;\n  }\n  buildStart() {\n    this._colorStack[0] = 15;\n    this._colorStackIndex = 1;\n    this._currentColor = 15;\n  }\n  push(mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & mask.mask;\n    const currentColor = this._colorStack[this._colorStackIndex];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n    this._colorStackIndex++;\n  }\n  pop(_mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    this._colorStackIndex--;\n    const currentColor = colorStack[this._colorStackIndex - 1];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    renderer.colorMask.setMask(instruction.colorMask);\n  }\n  destroy() {\n    this._colorStack = null;\n  }\n}\n/** @ignore */\nColorMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"colorMask\"\n};\n\nexport { ColorMaskPipe };\n//# sourceMappingURL=ColorMaskPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { CLEAR } from '../../renderers/gl/const.mjs';\nimport { STENCIL_MODES } from '../../renderers/shared/state/const.mjs';\n\n\"use strict\";\nclass StencilMaskPipe {\n  constructor(renderer) {\n    // used when building and also when executing..\n    this._maskStackHash = {};\n    this._maskHash = /* @__PURE__ */ new WeakMap();\n    this._renderer = renderer;\n  }\n  push(mask, _container, instructionSet) {\n    var _a;\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"pushMaskBegin\",\n      mask,\n      inverse: _container._maskOptions.inverse,\n      canBundle: false\n    });\n    const maskContainer = effect.mask;\n    maskContainer.includeInBuild = true;\n    if (!this._maskHash.has(effect)) {\n      this._maskHash.set(effect, {\n        instructionsStart: 0,\n        instructionsLength: 0\n      });\n    }\n    const maskData = this._maskHash.get(effect);\n    maskData.instructionsStart = instructionSet.instructionSize;\n    maskContainer.collectRenderables(\n      instructionSet,\n      renderer,\n      null\n    );\n    maskContainer.includeInBuild = false;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"pushMaskEnd\",\n      mask,\n      inverse: _container._maskOptions.inverse,\n      canBundle: false\n    });\n    const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n    maskData.instructionsLength = instructionsLength;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n  }\n  pop(mask, _container, instructionSet) {\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"popMaskBegin\",\n      inverse: _container._maskOptions.inverse,\n      canBundle: false\n    });\n    const maskData = this._maskHash.get(mask);\n    for (let i = 0; i < maskData.instructionsLength; i++) {\n      instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n    }\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"popMaskEnd\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    var _a;\n    const renderer = this._renderer;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    let maskStackIndex = (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n    if (instruction.action === \"pushMaskBegin\") {\n      renderer.renderTarget.ensureDepthStencil();\n      renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_ADD, maskStackIndex);\n      maskStackIndex++;\n      renderer.colorMask.setMask(0);\n    } else if (instruction.action === \"pushMaskEnd\") {\n      if (instruction.inverse) {\n        renderer.stencil.setStencilMode(STENCIL_MODES.INVERSE_MASK_ACTIVE, maskStackIndex);\n      } else {\n        renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n      }\n      renderer.colorMask.setMask(15);\n    } else if (instruction.action === \"popMaskBegin\") {\n      renderer.colorMask.setMask(0);\n      if (maskStackIndex !== 0) {\n        renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_REMOVE, maskStackIndex);\n      } else {\n        renderer.renderTarget.clear(null, CLEAR.STENCIL);\n        renderer.stencil.setStencilMode(STENCIL_MODES.DISABLED, maskStackIndex);\n      }\n      maskStackIndex--;\n    } else if (instruction.action === \"popMaskEnd\") {\n      if (instruction.inverse) {\n        renderer.stencil.setStencilMode(STENCIL_MODES.INVERSE_MASK_ACTIVE, maskStackIndex);\n      } else {\n        renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n      }\n      renderer.colorMask.setMask(15);\n    }\n    this._maskStackHash[renderTargetUid] = maskStackIndex;\n  }\n  destroy() {\n    this._renderer = null;\n    this._maskStackHash = null;\n    this._maskHash = null;\n  }\n}\nStencilMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"stencilMask\"\n};\n\nexport { StencilMaskPipe };\n//# sourceMappingURL=StencilMaskPipe.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nconst _BackgroundSystem = class _BackgroundSystem {\n  constructor() {\n    this.clearBeforeRender = true;\n    this._backgroundColor = new Color(0);\n    this.color = this._backgroundColor;\n    this.alpha = 1;\n  }\n  /**\n   * initiates the background system\n   * @param options - the options for the background colors\n   */\n  init(options) {\n    options = { ..._BackgroundSystem.defaultOptions, ...options };\n    this.clearBeforeRender = options.clearBeforeRender;\n    this.color = options.background || options.backgroundColor || this._backgroundColor;\n    this.alpha = options.backgroundAlpha;\n    this._backgroundColor.setAlpha(options.backgroundAlpha);\n  }\n  /** The background color to fill if not transparent */\n  get color() {\n    return this._backgroundColor;\n  }\n  set color(value) {\n    const incoming = Color.shared.setValue(value);\n    if (incoming.alpha < 1 && this._backgroundColor.alpha === 1) {\n      warn(\n        \"Cannot set a transparent background on an opaque canvas. To enable transparency, set backgroundAlpha < 1 when initializing your Application.\"\n      );\n    }\n    this._backgroundColor.setValue(value);\n  }\n  /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n  get alpha() {\n    return this._backgroundColor.alpha;\n  }\n  set alpha(value) {\n    this._backgroundColor.setAlpha(value);\n  }\n  /** The background color as an [R, G, B, A] array. */\n  get colorRgba() {\n    return this._backgroundColor.toArray();\n  }\n  /**\n   * destroys the background system\n   * @internal\n   */\n  destroy() {\n  }\n};\n/** @ignore */\n_BackgroundSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"background\",\n  priority: 0\n};\n/** default options used by the system */\n_BackgroundSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.backgroundAlpha}\n   * @default 1\n   */\n  backgroundAlpha: 1,\n  /**\n   * {@link WebGLOptions.backgroundColor}\n   * @default 0x000000\n   */\n  backgroundColor: 0,\n  /**\n   * {@link WebGLOptions.clearBeforeRender}\n   * @default true\n   */\n  clearBeforeRender: true\n};\nlet BackgroundSystem = _BackgroundSystem;\n\nexport { BackgroundSystem };\n//# sourceMappingURL=BackgroundSystem.mjs.map\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { FilterEffect } from '../../../../filters/FilterEffect.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nconst BLEND_MODE_FILTERS = {};\nextensions.handle(ExtensionType.BlendMode, (value) => {\n  if (!value.name) {\n    throw new Error(\"BlendMode extension must have a name property\");\n  }\n  BLEND_MODE_FILTERS[value.name] = value.ref;\n}, (value) => {\n  delete BLEND_MODE_FILTERS[value.name];\n});\nclass BlendModePipe {\n  constructor(renderer) {\n    this._isAdvanced = false;\n    this._filterHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    this._renderer.runners.prerender.add(this);\n  }\n  prerender() {\n    this._activeBlendMode = \"normal\";\n    this._isAdvanced = false;\n  }\n  /**\n   * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n   * @param renderable - The renderable we are adding to the instruction set\n   * @param blendMode - The blend mode of the renderable\n   * @param instructionSet - The instruction set we are adding to\n   */\n  setBlendMode(renderable, blendMode, instructionSet) {\n    if (this._activeBlendMode === blendMode) {\n      if (this._isAdvanced)\n        this._renderableList.push(renderable);\n      return;\n    }\n    this._activeBlendMode = blendMode;\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n    this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n    if (this._isAdvanced) {\n      this._beginAdvancedBlendMode(instructionSet);\n      this._renderableList.push(renderable);\n    }\n  }\n  _beginAdvancedBlendMode(instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    const blendMode = this._activeBlendMode;\n    if (!BLEND_MODE_FILTERS[blendMode]) {\n      warn(`Unable to assign BlendMode: '${blendMode}'. You may want to include: import 'pixi.js/advanced-blend-modes'`);\n      return;\n    }\n    let filterEffect = this._filterHash[blendMode];\n    if (!filterEffect) {\n      filterEffect = this._filterHash[blendMode] = new FilterEffect();\n      filterEffect.filters = [new BLEND_MODE_FILTERS[blendMode]()];\n    }\n    const instruction = {\n      renderPipeId: \"filter\",\n      action: \"pushFilter\",\n      renderables: [],\n      filterEffect,\n      canBundle: false\n    };\n    this._renderableList = instruction.renderables;\n    instructionSet.add(instruction);\n  }\n  _endAdvancedBlendMode(instructionSet) {\n    this._renderableList = null;\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  /**\n   * called when the instruction build process is starting this will reset internally to the default blend mode\n   * @internal\n   */\n  buildStart() {\n    this._isAdvanced = false;\n  }\n  /**\n   * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n   * active, we add the final render instructions added to the instruction set\n   * @param instructionSet - The instruction set we are adding to\n   * @internal\n   */\n  buildEnd(instructionSet) {\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n  }\n  /** @internal */\n  destroy() {\n    this._renderer = null;\n    this._renderableList = null;\n    for (const i in this._filterHash) {\n      this._filterHash[i].destroy();\n    }\n    this._filterHash = null;\n  }\n}\n/** @ignore */\nBlendModePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"blendMode\"\n};\n\nexport { BlendModePipe };\n//# sourceMappingURL=BlendModePipe.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst imageTypes = {\n  png: \"image/png\",\n  jpg: \"image/jpeg\",\n  webp: \"image/webp\"\n};\nconst _ExtractSystem = class _ExtractSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  _normalizeOptions(options, defaults = {}) {\n    if (options instanceof Container || options instanceof Texture) {\n      return {\n        target: options,\n        ...defaults\n      };\n    }\n    return {\n      ...defaults,\n      ...options\n    };\n  }\n  /**\n   * Creates an IImage from a display object or texture.\n   * @param options - Options for creating the image, or the target to extract\n   * @returns Promise that resolves with the generated IImage\n   * @example\n   * ```ts\n   * // Basic usage with a sprite\n   * const sprite = new Sprite(texture);\n   * const image = await renderer.extract.image(sprite);\n   * document.body.appendChild(image);\n   *\n   * // Advanced usage with options\n   * const image = await renderer.extract.image({\n   *     target: container,\n   *     format: 'webp',\n   *     quality: 0.8,\n   *     frame: new Rectangle(0, 0, 100, 100),\n   *     resolution: 2,\n   *     clearColor: '#ff0000',\n   *     antialias: true\n   * });\n   *\n   * // Extract directly from a texture\n   * const texture = Texture.from('myTexture.png');\n   * const image = await renderer.extract.image(texture);\n   * ```\n   * @see {@link ExtractImageOptions} For detailed options\n   * @see {@link ExtractSystem.base64} For base64 string output\n   * @see {@link ExtractSystem.canvas} For canvas output\n   * @see {@link ImageLike} For the image interface\n   * @category rendering\n   */\n  async image(options) {\n    const image = DOMAdapter.get().createImage();\n    image.src = await this.base64(options);\n    return image;\n  }\n  /**\n   * Converts the target into a base64 encoded string.\n   *\n   * This method works by first creating\n   * a canvas using `Extract.canvas` and then converting it to a base64 string.\n   * @param options - The options for creating the base64 string, or the target to extract\n   * @returns Promise that resolves with the base64 encoded string\n   * @example\n   * ```ts\n   * // Basic usage with a sprite\n   * const sprite = new Sprite(texture);\n   * const base64 = await renderer.extract.base64(sprite);\n   * console.log(base64); // data:image/png;base64,...\n   *\n   * // Advanced usage with options\n   * const base64 = await renderer.extract.base64({\n   *     target: container,\n   *     format: 'webp',\n   *     quality: 0.8,\n   *     frame: new Rectangle(0, 0, 100, 100),\n   *     resolution: 2\n   * });\n   * ```\n   * @throws Will throw an error if the platform doesn't support any of:\n   * - ICanvas.toDataURL\n   * - ICanvas.toBlob\n   * - ICanvas.convertToBlob\n   * @see {@link ExtractImageOptions} For detailed options\n   * @see {@link ExtractSystem.canvas} For canvas output\n   * @see {@link ExtractSystem.image} For HTMLImage output\n   * @category rendering\n   */\n  async base64(options) {\n    options = this._normalizeOptions(\n      options,\n      _ExtractSystem.defaultImageOptions\n    );\n    const { format, quality } = options;\n    const canvas = this.canvas(options);\n    if (canvas.toBlob !== void 0) {\n      return new Promise((resolve, reject) => {\n        canvas.toBlob((blob) => {\n          if (!blob) {\n            reject(new Error(\"ICanvas.toBlob failed!\"));\n            return;\n          }\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result);\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        }, imageTypes[format], quality);\n      });\n    }\n    if (canvas.toDataURL !== void 0) {\n      return canvas.toDataURL(imageTypes[format], quality);\n    }\n    if (canvas.convertToBlob !== void 0) {\n      const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    }\n    throw new Error(\"Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, or ICanvas.convertToBlob to be implemented\");\n  }\n  /**\n   * Creates a Canvas element, renders the target to it and returns it.\n   * This method is useful for creating static images or when you need direct canvas access.\n   * @param options - The options for creating the canvas, or the target to extract\n   * @returns A Canvas element with the texture rendered on\n   * @example\n   * ```ts\n   * // Basic canvas extraction from a sprite\n   * const sprite = new Sprite(texture);\n   * const canvas = renderer.extract.canvas(sprite);\n   * document.body.appendChild(canvas);\n   *\n   * // Extract with custom region\n   * const canvas = renderer.extract.canvas({\n   *     target: container,\n   *     frame: new Rectangle(0, 0, 100, 100)\n   * });\n   *\n   * // Extract with high resolution\n   * const canvas = renderer.extract.canvas({\n   *     target: sprite,\n   *     resolution: 2,\n   *     clearColor: '#ff0000'\n   * });\n   *\n   * // Extract directly from a texture\n   * const texture = Texture.from('myTexture.png');\n   * const canvas = renderer.extract.canvas(texture);\n   *\n   * // Extract with anti-aliasing\n   * const canvas = renderer.extract.canvas({\n   *     target: graphics,\n   *     antialias: true\n   * });\n   * ```\n   * @see {@link ExtractOptions} For detailed options\n   * @see {@link ExtractSystem.image} For HTMLImage output\n   * @see {@link ExtractSystem.pixels} For raw pixel data\n   * @category rendering\n   */\n  canvas(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    if (target instanceof Texture) {\n      return renderer.texture.generateCanvas(target);\n    }\n    const texture = renderer.textureGenerator.generateTexture(options);\n    const canvas = renderer.texture.generateCanvas(texture);\n    texture.destroy(true);\n    return canvas;\n  }\n  /**\n   * Returns a one-dimensional array containing the pixel data of the entire texture in RGBA order,\n   * with integer values between 0 and 255 (inclusive).\n   * > [!NOE] The returned array is a flat Uint8Array where every 4 values represent RGBA\n   * @param options - The options for extracting the image, or the target to extract\n   * @returns One-dimensional Uint8Array containing the pixel data in RGBA format\n   * @example\n   * ```ts\n   * // Basic pixel extraction\n   * const sprite = new Sprite(texture);\n   * const pixels = renderer.extract.pixels(sprite);\n   * console.log(pixels[0], pixels[1], pixels[2], pixels[3]); // R,G,B,A values\n   *\n   * // Extract with custom region\n   * const pixels = renderer.extract.pixels({\n   *     target: sprite,\n   *     frame: new Rectangle(0, 0, 100, 100)\n   * });\n   *\n   * // Extract with high resolution\n   * const pixels = renderer.extract.pixels({\n   *     target: sprite,\n   *     resolution: 2\n   * });\n   * ```\n   * @see {@link ExtractOptions} For detailed options\n   * @see {@link ExtractSystem.canvas} For canvas output\n   * @see {@link ExtractSystem.image} For image output\n   * @category rendering\n   */\n  pixels(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    const texture = target instanceof Texture ? target : renderer.textureGenerator.generateTexture(options);\n    const pixelInfo = renderer.texture.getPixels(texture);\n    if (target instanceof Container) {\n      texture.destroy(true);\n    }\n    return pixelInfo;\n  }\n  /**\n   * Creates a texture from a display object or existing texture.\n   *\n   * This is useful for creating\n   * reusable textures from rendered content or making copies of existing textures.\n   * > [!NOTE] The returned texture should be destroyed when no longer needed\n   * @param options - The options for creating the texture, or the target to extract\n   * @returns A new texture containing the extracted content\n   * @example\n   * ```ts\n   * // Basic texture extraction from a sprite\n   * const sprite = new Sprite(texture);\n   * const extractedTexture = renderer.extract.texture(sprite);\n   *\n   * // Extract with custom region\n   * const regionTexture = renderer.extract.texture({\n   *     target: container,\n   *     frame: new Rectangle(0, 0, 100, 100)\n   * });\n   *\n   * // Extract with high resolution\n   * const hiResTexture = renderer.extract.texture({\n   *     target: sprite,\n   *     resolution: 2,\n   *     clearColor: '#ff0000'\n   * });\n   *\n   * // Create a new sprite from extracted texture\n   * const newSprite = new Sprite(\n   *     renderer.extract.texture({\n   *         target: graphics,\n   *         antialias: true\n   *     })\n   * );\n   *\n   * // Clean up when done\n   * extractedTexture.destroy(true);\n   * ```\n   * @see {@link ExtractOptions} For detailed options\n   * @see {@link Texture} For texture management\n   * @see {@link GenerateTextureSystem} For texture generation\n   * @category rendering\n   */\n  texture(options) {\n    options = this._normalizeOptions(options);\n    if (options.target instanceof Texture)\n      return options.target;\n    return this._renderer.textureGenerator.generateTexture(options);\n  }\n  /**\n   * Extracts and downloads content from the renderer as an image file.\n   * This is a convenient way to save screenshots or export rendered content.\n   * > [!NOTE] The download will use PNG format regardless of the filename extension\n   * @param options - The options for downloading and extracting the image, or the target to extract\n   * @example\n   * ```ts\n   * // Basic download with default filename\n   * const sprite = new Sprite(texture);\n   * renderer.extract.download(sprite); // Downloads as 'image.png'\n   *\n   * // Download with custom filename\n   * renderer.extract.download({\n   *     target: sprite,\n   *     filename: 'screenshot.png'\n   * });\n   *\n   * // Download with custom region\n   * renderer.extract.download({\n   *     target: container,\n   *     filename: 'region.png',\n   *     frame: new Rectangle(0, 0, 100, 100)\n   * });\n   *\n   * // Download with high resolution and background\n   * renderer.extract.download({\n   *     target: stage,\n   *     filename: 'hd-screenshot.png',\n   *     resolution: 2,\n   *     clearColor: '#ff0000'\n   * });\n   *\n   * // Download with anti-aliasing\n   * renderer.extract.download({\n   *     target: graphics,\n   *     filename: 'smooth.png',\n   *     antialias: true\n   * });\n   * ```\n   * @see {@link ExtractDownloadOptions} For detailed options\n   * @see {@link ExtractSystem.image} For creating images without download\n   * @see {@link ExtractSystem.canvas} For canvas output\n   * @category rendering\n   */\n  download(options) {\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const link = document.createElement(\"a\");\n    link.download = options.filename ?? \"image.png\";\n    link.href = canvas.toDataURL(\"image/png\");\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n  /**\n   * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n   * The image will be displayed in the browser's console using CSS background images.\n   * @param options - The options for logging the image, or the target to log\n   * @param options.width - The width of the logged image preview in the console (in pixels)\n   * @example\n   * ```ts\n   * // Basic usage\n   * const sprite = new Sprite(texture);\n   * renderer.extract.log(sprite);\n   * ```\n   * @see {@link ExtractSystem.canvas} For getting raw canvas output\n   * @see {@link ExtractSystem.pixels} For raw pixel data\n   * @category rendering\n   * @advanced\n   */\n  log(options) {\n    const width = options.width ?? 200;\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const base64 = canvas.toDataURL();\n    console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n    const style = [\n      \"font-size: 1px;\",\n      `padding: ${width}px ${300}px;`,\n      `background: url(${base64}) no-repeat;`,\n      \"background-size: contain;\"\n    ].join(\" \");\n    console.log(\"%c \", style);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_ExtractSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"extract\"\n};\n/**\n * Default options for image extraction.\n * @example\n * ```ts\n * // Customize default options\n * ExtractSystem.defaultImageOptions.format = 'webp';\n * ExtractSystem.defaultImageOptions.quality = 0.8;\n *\n * // Use defaults\n * const image = await renderer.extract.image(sprite);\n * ```\n */\n_ExtractSystem.defaultImageOptions = {\n  format: \"png\",\n  quality: 1\n};\nlet ExtractSystem = _ExtractSystem;\n\nexport { ExtractSystem };\n//# sourceMappingURL=ExtractSystem.mjs.map\n","import { TextureSource } from './sources/TextureSource.mjs';\nimport { Texture } from './Texture.mjs';\n\n\"use strict\";\nclass RenderTexture extends Texture {\n  static create(options) {\n    return new RenderTexture({\n      source: new TextureSource(options)\n    });\n  }\n  /**\n   * Resizes the render texture.\n   * @param width - The new width of the render texture.\n   * @param height - The new height of the render texture.\n   * @param resolution - The new resolution of the render texture.\n   * @returns This texture.\n   */\n  resize(width, height, resolution) {\n    this.source.resize(width, height, resolution);\n    return this;\n  }\n}\n\nexport { RenderTexture };\n//# sourceMappingURL=RenderTexture.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds.mjs';\nimport { getLocalBounds } from '../../../../scene/container/bounds/getLocalBounds.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { RenderTexture } from '../texture/RenderTexture.mjs';\n\n\"use strict\";\nconst tempRect = new Rectangle();\nconst tempBounds = new Bounds();\nconst noColor = [0, 0, 0, 0];\nclass GenerateTextureSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * Creates a texture from a display object that can be used for creating sprites and other textures.\n   * This is particularly useful for optimizing performance when a complex container needs to be reused.\n   * @param options - Generate texture options or a container to convert to texture\n   * @returns A new RenderTexture containing the rendered display object\n   * @example\n   * ```ts\n   * // Basic usage with a container\n   * const container = new Container();\n   * container.addChild(\n   *     new Graphics()\n   *         .circle(0, 0, 50)\n   *         .fill('red')\n   * );\n   *\n   * const texture = renderer.textureGenerator.generateTexture(container);\n   *\n   * // Advanced usage with options\n   * const texture = renderer.textureGenerator.generateTexture({\n   *     target: container,\n   *     frame: new Rectangle(0, 0, 100, 100), // Specific region\n   *     resolution: 2,                        // High DPI\n   *     clearColor: '#ff0000',               // Red background\n   *     antialias: true                      // Smooth edges\n   * });\n   *\n   * // Create a sprite from the generated texture\n   * const sprite = new Sprite(texture);\n   *\n   * // Clean up when done\n   * texture.destroy(true);\n   * ```\n   * @see {@link GenerateTextureOptions} For detailed texture generation options\n   * @see {@link RenderTexture} For the type of texture created\n   * @category rendering\n   */\n  generateTexture(options) {\n    if (options instanceof Container) {\n      options = {\n        target: options,\n        frame: void 0,\n        textureSourceOptions: {},\n        resolution: void 0\n      };\n    }\n    const resolution = options.resolution || this._renderer.resolution;\n    const antialias = options.antialias || this._renderer.view.antialias;\n    const container = options.target;\n    let clearColor = options.clearColor;\n    if (clearColor) {\n      const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n      clearColor = isRGBAArray ? clearColor : Color.shared.setValue(clearColor).toArray();\n    } else {\n      clearColor = noColor;\n    }\n    const region = options.frame?.copyTo(tempRect) || getLocalBounds(container, tempBounds).rectangle;\n    region.width = Math.max(region.width, 1 / resolution) | 0;\n    region.height = Math.max(region.height, 1 / resolution) | 0;\n    const target = RenderTexture.create({\n      ...options.textureSourceOptions,\n      width: region.width,\n      height: region.height,\n      resolution,\n      antialias\n    });\n    const transform = Matrix.shared.translate(-region.x, -region.y);\n    this._renderer.render({\n      container,\n      transform,\n      target,\n      clearColor\n    });\n    target.source.updateMipmaps();\n    return target;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGenerateTextureSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGenerator\"\n};\n\nexport { GenerateTextureSystem };\n//# sourceMappingURL=GenerateTextureSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Point } from '../../../../maths/point/Point.mjs';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform.mjs';\nimport { BindGroup } from '../../gpu/shader/BindGroup.mjs';\nimport { RendererType } from '../../types.mjs';\nimport { UniformGroup } from '../shader/UniformGroup.mjs';\n\n\"use strict\";\nclass GlobalUniformSystem {\n  constructor(renderer) {\n    this._stackIndex = 0;\n    this._globalUniformDataStack = [];\n    this._uniformsPool = [];\n    this._activeUniforms = [];\n    this._bindGroupPool = [];\n    this._activeBindGroups = [];\n    this._renderer = renderer;\n  }\n  reset() {\n    this._stackIndex = 0;\n    for (let i = 0; i < this._activeUniforms.length; i++) {\n      this._uniformsPool.push(this._activeUniforms[i]);\n    }\n    for (let i = 0; i < this._activeBindGroups.length; i++) {\n      this._bindGroupPool.push(this._activeBindGroups[i]);\n    }\n    this._activeUniforms.length = 0;\n    this._activeBindGroups.length = 0;\n  }\n  start(options) {\n    this.reset();\n    this.push(options);\n  }\n  bind({\n    size,\n    projectionMatrix,\n    worldTransformMatrix,\n    worldColor,\n    offset\n  }) {\n    const renderTarget = this._renderer.renderTarget.renderTarget;\n    const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n      projectionData: renderTarget,\n      worldTransformMatrix: new Matrix(),\n      worldColor: 4294967295,\n      offset: new Point()\n    };\n    const globalUniformData = {\n      projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n      resolution: size || renderTarget.size,\n      worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n      worldColor: worldColor || currentGlobalUniformData.worldColor,\n      offset: offset || currentGlobalUniformData.offset,\n      bindGroup: null\n    };\n    const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n    this._activeUniforms.push(uniformGroup);\n    const uniforms = uniformGroup.uniforms;\n    uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n    uniforms.uResolution = globalUniformData.resolution;\n    uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n    uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n    uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n    color32BitToUniform(\n      globalUniformData.worldColor,\n      uniforms.uWorldColorAlpha,\n      0\n    );\n    uniformGroup.update();\n    let bindGroup;\n    if (this._renderer.renderPipes.uniformBatch) {\n      bindGroup = this._renderer.renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n    } else {\n      bindGroup = this._bindGroupPool.pop() || new BindGroup();\n      this._activeBindGroups.push(bindGroup);\n      bindGroup.setResource(uniformGroup, 0);\n    }\n    globalUniformData.bindGroup = bindGroup;\n    this._currentGlobalUniformData = globalUniformData;\n  }\n  push(options) {\n    this.bind(options);\n    this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n  }\n  pop() {\n    this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n    if (this._renderer.type === RendererType.WEBGL) {\n      this._currentGlobalUniformData.bindGroup.resources[0].update();\n    }\n  }\n  get bindGroup() {\n    return this._currentGlobalUniformData.bindGroup;\n  }\n  get globalUniformData() {\n    return this._currentGlobalUniformData;\n  }\n  get uniformGroup() {\n    return this._currentGlobalUniformData.bindGroup.resources[0];\n  }\n  _createUniforms() {\n    const globalUniforms = new UniformGroup({\n      uProjectionMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uWorldTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n      uWorldColorAlpha: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    }, {\n      isStatic: true\n    });\n    return globalUniforms;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGlobalUniformSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"globalUniforms\"\n};\n\nexport { GlobalUniformSystem };\n//# sourceMappingURL=GlobalUniformSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Ticker } from '../../../ticker/Ticker.mjs';\n\n\"use strict\";\nlet uid = 1;\nclass SchedulerSystem {\n  constructor() {\n    this._tasks = [];\n    /** a small off set to apply to the repeat schedules. This is just to make sure they run at slightly different times */\n    this._offset = 0;\n  }\n  /** Initializes the scheduler system and starts the ticker. */\n  init() {\n    Ticker.system.add(this._update, this);\n  }\n  /**\n   * Schedules a repeating task.\n   * @param func - The function to execute.\n   * @param duration - The interval duration in milliseconds.\n   * @param useOffset - this will spread out tasks so that they do not all run at the same time\n   * @returns The unique identifier for the scheduled task.\n   */\n  repeat(func, duration, useOffset = true) {\n    const id = uid++;\n    let offset = 0;\n    if (useOffset) {\n      this._offset += 1e3;\n      offset = this._offset;\n    }\n    this._tasks.push({\n      func,\n      duration,\n      start: performance.now(),\n      offset,\n      last: performance.now(),\n      repeat: true,\n      id\n    });\n    return id;\n  }\n  /**\n   * Cancels a scheduled task.\n   * @param id - The unique identifier of the task to cancel.\n   */\n  cancel(id) {\n    for (let i = 0; i < this._tasks.length; i++) {\n      if (this._tasks[i].id === id) {\n        this._tasks.splice(i, 1);\n        return;\n      }\n    }\n  }\n  /**\n   * Updates and executes the scheduled tasks.\n   * @private\n   */\n  _update() {\n    const now = performance.now();\n    for (let i = 0; i < this._tasks.length; i++) {\n      const task = this._tasks[i];\n      if (now - task.offset - task.last >= task.duration) {\n        const elapsed = now - task.start;\n        task.func(elapsed);\n        task.last = now;\n      }\n    }\n  }\n  /**\n   * Destroys the scheduler system and removes all tasks.\n   * @internal\n   */\n  destroy() {\n    Ticker.system.remove(this._update, this);\n    this._tasks.length = 0;\n  }\n}\n/** @ignore */\nSchedulerSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"scheduler\",\n  priority: 0\n};\n\nexport { SchedulerSystem };\n//# sourceMappingURL=SchedulerSystem.mjs.map\n","import { DOMAdapter } from '../environment/adapter.mjs';\nimport { VERSION } from './const.mjs';\n\n\"use strict\";\nlet saidHello = false;\nfunction sayHello(type) {\n  if (saidHello) {\n    return;\n  }\n  if (DOMAdapter.get().getNavigator().userAgent.toLowerCase().indexOf(\"chrome\") > -1) {\n    const args = [\n      `%c  %c  %c  %c  %c PixiJS %c v${VERSION} (${type}) http://www.pixijs.com/\n\n`,\n      \"background: #E72264; padding:5px 0;\",\n      \"background: #6CA2EA; padding:5px 0;\",\n      \"background: #B5D33D; padding:5px 0;\",\n      \"background: #FED23F; padding:5px 0;\",\n      \"color: #FFFFFF; background: #E72264; padding:5px 0;\",\n      \"color: #E72264; background: #FFFFFF; padding:5px 0;\"\n    ];\n    globalThis.console.log(...args);\n  } else if (globalThis.console) {\n    globalThis.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n  }\n  saidHello = true;\n}\n\nexport { sayHello };\n//# sourceMappingURL=sayHello.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { sayHello } from '../../../../utils/sayHello.mjs';\nimport { RendererType } from '../../types.mjs';\n\n\"use strict\";\nclass HelloSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * It all starts here! This initiates every system, passing in the options for any system by name.\n   * @param options - the config for the renderer and all its systems\n   */\n  init(options) {\n    if (options.hello) {\n      let name = this._renderer.name;\n      if (this._renderer.type === RendererType.WEBGL) {\n        name += ` ${this._renderer.context.webGLVersion}`;\n      }\n      sayHello(name);\n    }\n  }\n}\n/** @ignore */\nHelloSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"hello\",\n  priority: -2\n};\n/** The default options for the system. */\nHelloSystem.defaultOptions = {\n  /** {@link WebGLOptions.hello} */\n  hello: false\n};\n\nexport { HelloSystem };\n//# sourceMappingURL=HelloSystem.mjs.map\n","\"use strict\";\nfunction cleanHash(hash) {\n  let clean = false;\n  for (const i in hash) {\n    if (hash[i] == void 0) {\n      clean = true;\n      break;\n    }\n  }\n  if (!clean)\n    return hash;\n  const cleanHash2 = /* @__PURE__ */ Object.create(null);\n  for (const i in hash) {\n    const value = hash[i];\n    if (value) {\n      cleanHash2[i] = value;\n    }\n  }\n  return cleanHash2;\n}\nfunction cleanArray(arr) {\n  let offset = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == void 0) {\n      offset++;\n    } else {\n      arr[i - offset] = arr[i];\n    }\n  }\n  arr.length -= offset;\n  return arr;\n}\n\nexport { cleanArray, cleanHash };\n//# sourceMappingURL=clean.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { cleanHash, cleanArray } from '../../../../utils/data/clean.mjs';\n\n\"use strict\";\nlet renderableGCTick = 0;\nconst _RenderableGCSystem = class _RenderableGCSystem {\n  /**\n   * Creates a new RenderableGCSystem instance.\n   * @param renderer - The renderer this garbage collection system works for\n   */\n  constructor(renderer) {\n    /** Array of renderables being tracked for garbage collection */\n    this._managedRenderables = [];\n    /** Array of hash objects being tracked for cleanup */\n    this._managedHashes = [];\n    /** Array of arrays being tracked for cleanup */\n    this._managedArrays = [];\n    this._renderer = renderer;\n  }\n  /**\n   * Initializes the garbage collection system with the provided options.\n   * @param options - Configuration options for the renderer\n   */\n  init(options) {\n    options = { ..._RenderableGCSystem.defaultOptions, ...options };\n    this.maxUnusedTime = options.renderableGCMaxUnusedTime;\n    this._frequency = options.renderableGCFrequency;\n    this.enabled = options.renderableGCActive;\n  }\n  /**\n   * Gets whether the garbage collection system is currently enabled.\n   * @returns True if GC is enabled, false otherwise\n   */\n  get enabled() {\n    return !!this._handler;\n  }\n  /**\n   * Enables or disables the garbage collection system.\n   * When enabled, schedules periodic cleanup of resources.\n   * When disabled, cancels all scheduled cleanups.\n   */\n  set enabled(value) {\n    if (this.enabled === value)\n      return;\n    if (value) {\n      this._handler = this._renderer.scheduler.repeat(\n        () => this.run(),\n        this._frequency,\n        false\n      );\n      this._hashHandler = this._renderer.scheduler.repeat(\n        () => {\n          for (const hash of this._managedHashes) {\n            hash.context[hash.hash] = cleanHash(hash.context[hash.hash]);\n          }\n        },\n        this._frequency\n      );\n      this._arrayHandler = this._renderer.scheduler.repeat(\n        () => {\n          for (const array of this._managedArrays) {\n            cleanArray(array.context[array.hash]);\n          }\n        },\n        this._frequency\n      );\n    } else {\n      this._renderer.scheduler.cancel(this._handler);\n      this._renderer.scheduler.cancel(this._hashHandler);\n      this._renderer.scheduler.cancel(this._arrayHandler);\n    }\n  }\n  /**\n   * Adds a hash table to be managed by the garbage collector.\n   * @param context - The object containing the hash table\n   * @param hash - The property name of the hash table\n   */\n  addManagedHash(context, hash) {\n    this._managedHashes.push({ context, hash });\n  }\n  /**\n   * Adds an array to be managed by the garbage collector.\n   * @param context - The object containing the array\n   * @param hash - The property name of the array\n   */\n  addManagedArray(context, hash) {\n    this._managedArrays.push({ context, hash });\n  }\n  /**\n   * Updates the GC timestamp and tracking before rendering.\n   * @param options - The render options\n   * @param options.container - The container to render\n   */\n  prerender({\n    container\n  }) {\n    this._now = performance.now();\n    container.renderGroup.gcTick = renderableGCTick++;\n    this._updateInstructionGCTick(container.renderGroup, container.renderGroup.gcTick);\n  }\n  /**\n   * Starts tracking a renderable for garbage collection.\n   * @param renderable - The renderable to track\n   */\n  addRenderable(renderable) {\n    if (!this.enabled)\n      return;\n    if (renderable._lastUsed === -1) {\n      this._managedRenderables.push(renderable);\n      renderable.once(\"destroyed\", this._removeRenderable, this);\n    }\n    renderable._lastUsed = this._now;\n  }\n  /**\n   * Performs garbage collection by cleaning up unused renderables.\n   * Removes renderables that haven't been used for longer than maxUnusedTime.\n   */\n  run() {\n    const now = this._now;\n    const managedRenderables = this._managedRenderables;\n    const renderPipes = this._renderer.renderPipes;\n    let offset = 0;\n    for (let i = 0; i < managedRenderables.length; i++) {\n      const renderable = managedRenderables[i];\n      if (renderable === null) {\n        offset++;\n        continue;\n      }\n      const renderGroup = renderable.renderGroup ?? renderable.parentRenderGroup;\n      const currentTick = renderGroup?.instructionSet?.gcTick ?? -1;\n      if ((renderGroup?.gcTick ?? 0) === currentTick) {\n        renderable._lastUsed = now;\n      }\n      if (now - renderable._lastUsed > this.maxUnusedTime) {\n        if (!renderable.destroyed) {\n          const rp = renderPipes;\n          if (renderGroup)\n            renderGroup.structureDidChange = true;\n          rp[renderable.renderPipeId].destroyRenderable(renderable);\n        }\n        renderable._lastUsed = -1;\n        offset++;\n        renderable.off(\"destroyed\", this._removeRenderable, this);\n      } else {\n        managedRenderables[i - offset] = renderable;\n      }\n    }\n    managedRenderables.length -= offset;\n  }\n  /** Cleans up the garbage collection system. Disables GC and removes all tracked resources. */\n  destroy() {\n    this.enabled = false;\n    this._renderer = null;\n    this._managedRenderables.length = 0;\n    this._managedHashes.length = 0;\n    this._managedArrays.length = 0;\n  }\n  /**\n   * Removes a renderable from being tracked when it's destroyed.\n   * @param renderable - The renderable to stop tracking\n   */\n  _removeRenderable(renderable) {\n    const index = this._managedRenderables.indexOf(renderable);\n    if (index >= 0) {\n      renderable.off(\"destroyed\", this._removeRenderable, this);\n      this._managedRenderables[index] = null;\n    }\n  }\n  /**\n   * Updates the GC tick counter for a render group and its children.\n   * @param renderGroup - The render group to update\n   * @param gcTick - The new tick value\n   */\n  _updateInstructionGCTick(renderGroup, gcTick) {\n    renderGroup.instructionSet.gcTick = gcTick;\n    for (const child of renderGroup.renderGroupChildren) {\n      this._updateInstructionGCTick(child, gcTick);\n    }\n  }\n};\n/**\n * Extension metadata for registering this system with the renderer.\n * @ignore\n */\n_RenderableGCSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"renderableGC\",\n  priority: 0\n};\n/**\n * Default configuration options for the garbage collection system.\n * These can be overridden when initializing the renderer.\n */\n_RenderableGCSystem.defaultOptions = {\n  /** Enable/disable the garbage collector */\n  renderableGCActive: true,\n  /** Time in ms before an unused resource is collected (default 1 minute) */\n  renderableGCMaxUnusedTime: 6e4,\n  /** How often to run garbage collection in ms (default 30 seconds) */\n  renderableGCFrequency: 3e4\n};\nlet RenderableGCSystem = _RenderableGCSystem;\n\nexport { RenderableGCSystem };\n//# sourceMappingURL=RenderableGCSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst _TextureGCSystem = class _TextureGCSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n    this.count = 0;\n    this.checkCount = 0;\n  }\n  init(options) {\n    options = { ..._TextureGCSystem.defaultOptions, ...options };\n    this.checkCountMax = options.textureGCCheckCountMax;\n    this.maxIdle = options.textureGCAMaxIdle ?? options.textureGCMaxIdle;\n    this.active = options.textureGCActive;\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  postrender() {\n    if (!this._renderer.renderingToScreen) {\n      return;\n    }\n    this.count++;\n    if (!this.active)\n      return;\n    this.checkCount++;\n    if (this.checkCount > this.checkCountMax) {\n      this.checkCount = 0;\n      this.run();\n    }\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  run() {\n    const managedTextures = this._renderer.texture.managedTextures;\n    for (let i = 0; i < managedTextures.length; i++) {\n      const texture = managedTextures[i];\n      if (texture.autoGarbageCollect && texture.resource && texture._touched > -1 && this.count - texture._touched > this.maxIdle) {\n        texture._touched = -1;\n        texture.unload();\n      }\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_TextureGCSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGC\"\n};\n/** default options for the TextureGCSystem */\n_TextureGCSystem.defaultOptions = {\n  /**\n   * If set to true, this will enable the garbage collector on the GPU.\n   * @default true\n   */\n  textureGCActive: true,\n  /**\n   * @deprecated since 8.3.0\n   * @see {@link TextureGCSystemOptions.textureGCMaxIdle}\n   */\n  textureGCAMaxIdle: null,\n  /**\n   * The maximum idle frames before a texture is destroyed by garbage collection.\n   * @default 60 * 60\n   */\n  textureGCMaxIdle: 60 * 60,\n  /**\n   * Frames between two garbage collections.\n   * @default 600\n   */\n  textureGCCheckCountMax: 600\n};\nlet TextureGCSystem = _TextureGCSystem;\n\nexport { TextureGCSystem };\n//# sourceMappingURL=TextureGCSystem.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\nimport { RenderTarget } from '../renderTarget/RenderTarget.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\n\n\"use strict\";\nconst _ViewSystem = class _ViewSystem {\n  /**\n   * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n   * This is only supported for HTMLCanvasElement and will be ignored if the canvas is an OffscreenCanvas.\n   * @type {boolean}\n   */\n  get autoDensity() {\n    return this.texture.source.autoDensity;\n  }\n  set autoDensity(value) {\n    this.texture.source.autoDensity = value;\n  }\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.texture.source._resolution;\n  }\n  set resolution(value) {\n    this.texture.source.resize(\n      this.texture.source.width,\n      this.texture.source.height,\n      value\n    );\n  }\n  /**\n   * initiates the view system\n   * @param options - the options for the view\n   */\n  init(options) {\n    options = {\n      ..._ViewSystem.defaultOptions,\n      ...options\n    };\n    if (options.view) {\n      deprecation(v8_0_0, \"ViewSystem.view has been renamed to ViewSystem.canvas\");\n      options.canvas = options.view;\n    }\n    this.screen = new Rectangle(0, 0, options.width, options.height);\n    this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n    this.antialias = !!options.antialias;\n    this.texture = getCanvasTexture(this.canvas, options);\n    this.renderTarget = new RenderTarget({\n      colorTextures: [this.texture],\n      depth: !!options.depth,\n      isRoot: true\n    });\n    this.texture.source.transparent = options.backgroundAlpha < 1;\n    this.resolution = options.resolution;\n  }\n  /**\n   * Resizes the screen and canvas to the specified dimensions.\n   * @param desiredScreenWidth - The new width of the screen.\n   * @param desiredScreenHeight - The new height of the screen.\n   * @param resolution\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.screen.width = this.texture.frame.width;\n    this.screen.height = this.texture.frame.height;\n  }\n  /**\n   * Destroys this System and optionally removes the canvas from the dom.\n   * @param {options | false} options - The options for destroying the view, or \"false\".\n   * @example\n   * viewSystem.destroy();\n   * viewSystem.destroy(true);\n   * viewSystem.destroy({ removeView: true });\n   */\n  destroy(options = false) {\n    const removeView = typeof options === \"boolean\" ? options : !!options?.removeView;\n    if (removeView && this.canvas.parentNode) {\n      this.canvas.parentNode.removeChild(this.canvas);\n    }\n  }\n};\n/** @ignore */\n_ViewSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"view\",\n  priority: 0\n};\n/** The default options for the view system. */\n_ViewSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.width}\n   * @default 800\n   */\n  width: 800,\n  /**\n   * {@link WebGLOptions.height}\n   * @default 600\n   */\n  height: 600,\n  /**\n   * {@link WebGLOptions.autoDensity}\n   * @default false\n   */\n  autoDensity: false,\n  /**\n   * {@link WebGLOptions.antialias}\n   * @default false\n   */\n  antialias: false\n};\nlet ViewSystem = _ViewSystem;\n\nexport { ViewSystem };\n//# sourceMappingURL=ViewSystem.mjs.map\n","import { CustomRenderPipe } from '../../../../scene/container/CustomRenderPipe.mjs';\nimport { RenderGroupPipe } from '../../../../scene/container/RenderGroupPipe.mjs';\nimport { RenderGroupSystem } from '../../../../scene/container/RenderGroupSystem.mjs';\nimport { SpritePipe } from '../../../../scene/sprite/SpritePipe.mjs';\nimport { RendererInitHook } from '../../../../utils/global/globalHooks.mjs';\nimport { BatcherPipe } from '../../../batcher/shared/BatcherPipe.mjs';\nimport { AlphaMaskPipe } from '../../../mask/alpha/AlphaMaskPipe.mjs';\nimport { ColorMaskPipe } from '../../../mask/color/ColorMaskPipe.mjs';\nimport { StencilMaskPipe } from '../../../mask/stencil/StencilMaskPipe.mjs';\nimport { BackgroundSystem } from '../background/BackgroundSystem.mjs';\nimport { BlendModePipe } from '../blendModes/BlendModePipe.mjs';\nimport { ExtractSystem } from '../extract/ExtractSystem.mjs';\nimport { GenerateTextureSystem } from '../extract/GenerateTextureSystem.mjs';\nimport { GlobalUniformSystem } from '../renderTarget/GlobalUniformSystem.mjs';\nimport { SchedulerSystem } from '../SchedulerSystem.mjs';\nimport { HelloSystem } from '../startup/HelloSystem.mjs';\nimport { RenderableGCSystem } from '../texture/RenderableGCSystem.mjs';\nimport { TextureGCSystem } from '../texture/TextureGCSystem.mjs';\nimport { ViewSystem } from '../view/ViewSystem.mjs';\n\n\"use strict\";\nconst SharedSystems = [\n  BackgroundSystem,\n  GlobalUniformSystem,\n  HelloSystem,\n  ViewSystem,\n  RenderGroupSystem,\n  TextureGCSystem,\n  GenerateTextureSystem,\n  ExtractSystem,\n  RendererInitHook,\n  RenderableGCSystem,\n  SchedulerSystem\n];\nconst SharedRenderPipes = [\n  BlendModePipe,\n  BatcherPipe,\n  SpritePipe,\n  RenderGroupPipe,\n  AlphaMaskPipe,\n  StencilMaskPipe,\n  ColorMaskPipe,\n  CustomRenderPipe\n];\n\nexport { SharedRenderPipes, SharedSystems };\n//# sourceMappingURL=SharedSystems.mjs.map\n","import { uniformParsers } from './uniformParsers.mjs';\n\n\"use strict\";\nfunction createUboSyncFunction(uboElements, parserCode, arrayGenerationFunction, singleSettersMap) {\n  const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n  let prev = 0;\n  for (let i = 0; i < uboElements.length; i++) {\n    const uboElement = uboElements[i];\n    const name = uboElement.data.name;\n    let parsed = false;\n    let offset = 0;\n    for (let j = 0; j < uniformParsers.length; j++) {\n      const uniformParser = uniformParsers[j];\n      if (uniformParser.test(uboElement.data)) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          `name = \"${name}\";`,\n          `offset += ${offset - prev};`,\n          uniformParsers[j][parserCode] || uniformParsers[j].ubo\n        );\n        parsed = true;\n        break;\n      }\n    }\n    if (!parsed) {\n      if (uboElement.data.size > 1) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n      } else {\n        const template = singleSettersMap[uboElement.data.type];\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          /* wgsl */\n          `\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `\n        );\n      }\n    }\n    prev = offset;\n  }\n  const fragmentSrc = funcFragments.join(\"\\n\");\n  return new Function(\n    \"uv\",\n    \"data\",\n    \"dataInt32\",\n    \"offset\",\n    fragmentSrc\n  );\n}\n\nexport { createUboSyncFunction };\n//# sourceMappingURL=createUboSyncFunction.mjs.map\n","import { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported.mjs';\nimport { Buffer } from '../buffer/Buffer.mjs';\nimport { BufferUsage } from '../buffer/const.mjs';\n\n\"use strict\";\nclass UboSystem {\n  constructor(adaptor) {\n    /** Cache of uniform buffer layouts and sync functions, so we don't have to re-create them */\n    this._syncFunctionHash = /* @__PURE__ */ Object.create(null);\n    this._adaptor = adaptor;\n    this._systemCheck();\n  }\n  /**\n   * Overridable function by `pixi.js/unsafe-eval` to silence\n   * throwing an error if platform doesn't support unsafe-evals.\n   * @private\n   */\n  _systemCheck() {\n    if (!unsafeEvalSupported()) {\n      throw new Error(\"Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.\");\n    }\n  }\n  ensureUniformGroup(uniformGroup) {\n    const uniformData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n  }\n  getUniformGroupData(uniformGroup) {\n    return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n  }\n  _initUniformGroup(uniformGroup) {\n    const uniformGroupSignature = uniformGroup._signature;\n    let uniformData = this._syncFunctionHash[uniformGroupSignature];\n    if (!uniformData) {\n      const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n      const layout = this._adaptor.createUboElements(elements);\n      const syncFunction = this._generateUboSync(layout.uboElements);\n      uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n        layout,\n        syncFunction\n      };\n    }\n    return this._syncFunctionHash[uniformGroupSignature];\n  }\n  _generateUboSync(uboElements) {\n    return this._adaptor.generateUboSync(uboElements);\n  }\n  syncUniformGroup(uniformGroup, data, offset) {\n    const uniformGroupData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformGroupData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n    let dataInt32 = null;\n    if (!data) {\n      data = uniformGroup.buffer.data;\n      dataInt32 = uniformGroup.buffer.dataInt32;\n    }\n    offset || (offset = 0);\n    uniformGroupData.syncFunction(uniformGroup.uniforms, data, dataInt32, offset);\n    return true;\n  }\n  updateUniformGroup(uniformGroup) {\n    if (uniformGroup.isStatic && !uniformGroup._dirtyId)\n      return false;\n    uniformGroup._dirtyId = 0;\n    const synced = this.syncUniformGroup(uniformGroup);\n    uniformGroup.buffer.update();\n    return synced;\n  }\n  destroy() {\n    this._syncFunctionHash = null;\n  }\n}\n\nexport { UboSystem };\n//# sourceMappingURL=UboSystem.mjs.map\n","import { warn } from '../../../../../utils/logging/warn.mjs';\nimport { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction ensureAttributes(geometry, extractedData) {\n  for (const i in geometry.attributes) {\n    const attribute = geometry.attributes[i];\n    const attributeData = extractedData[i];\n    if (attributeData) {\n      attribute.format ?? (attribute.format = attributeData.format);\n      attribute.offset ?? (attribute.offset = attributeData.offset);\n      attribute.instance ?? (attribute.instance = attributeData.instance);\n    } else {\n      warn(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n    }\n  }\n  ensureStartAndStride(geometry);\n}\nfunction ensureStartAndStride(geometry) {\n  const { buffers, attributes } = geometry;\n  const tempStride = {};\n  const tempStart = {};\n  for (const j in buffers) {\n    const buffer = buffers[j];\n    tempStride[buffer.uid] = 0;\n    tempStart[buffer.uid] = 0;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    tempStride[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    attribute.stride ?? (attribute.stride = tempStride[attribute.buffer.uid]);\n    attribute.start ?? (attribute.start = tempStart[attribute.buffer.uid]);\n    tempStart[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n}\n\nexport { ensureAttributes };\n//# sourceMappingURL=ensureAttributes.mjs.map\n","import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { CLEAR } from '../../gl/const.mjs';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection.mjs';\nimport { SystemRunner } from '../system/SystemRunner.mjs';\nimport { CanvasSource } from '../texture/sources/CanvasSource.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\nimport { isRenderingToScreen } from './isRenderingToScreen.mjs';\nimport { RenderTarget } from './RenderTarget.mjs';\n\n\"use strict\";\nclass RenderTargetSystem {\n  constructor(renderer) {\n    /** This is the root viewport for the render pass*/\n    this.rootViewPort = new Rectangle();\n    /** the current viewport that the gpu is using */\n    this.viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    this.onRenderTargetChange = new SystemRunner(\"onRenderTargetChange\");\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    this.projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    this.defaultClearColor = [0, 0, 0, 0];\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    this._renderSurfaceToRenderTargetHash = /* @__PURE__ */ new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    this._renderTargetStack = [];\n    this._renderer = renderer;\n    renderer.renderableGC.addManagedHash(this, \"_gpuRenderTargetHash\");\n  }\n  /** called when dev wants to finish a render pass */\n  finishRenderPass() {\n    this.adaptor.finishRenderPass(this.renderTarget);\n  }\n  /**\n   * called when the renderer starts to render a scene.\n   * @param options\n   * @param options.target - the render target to render to\n   * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param options.clearColor - the color to clear to\n   * @param options.frame - the frame to render to\n   */\n  renderStart({\n    target,\n    clear,\n    clearColor,\n    frame\n  }) {\n    this._renderTargetStack.length = 0;\n    this.push(\n      target,\n      clear,\n      clearColor,\n      frame\n    );\n    this.rootViewPort.copyFrom(this.viewport);\n    this.rootRenderTarget = this.renderTarget;\n    this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n    this.adaptor.prerender?.(this.rootRenderTarget);\n  }\n  postrender() {\n    this.adaptor.postrender?.(this.rootRenderTarget);\n  }\n  /**\n   * Binding a render surface! This is the main function of the render target system.\n   * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n   * Once bound all draw calls will be rendered to the render surface.\n   *\n   * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n   * @param renderSurface - the render surface to bind\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to render to\n   * @returns the render target that was bound\n   */\n  bind(renderSurface, clear = true, clearColor, frame) {\n    const renderTarget = this.getRenderTarget(renderSurface);\n    const didChange = this.renderTarget !== renderTarget;\n    this.renderTarget = renderTarget;\n    this.renderSurface = renderSurface;\n    const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n    if (renderTarget.pixelWidth !== gpuRenderTarget.width || renderTarget.pixelHeight !== gpuRenderTarget.height) {\n      this.adaptor.resizeGpuRenderTarget(renderTarget);\n      gpuRenderTarget.width = renderTarget.pixelWidth;\n      gpuRenderTarget.height = renderTarget.pixelHeight;\n    }\n    const source = renderTarget.colorTexture;\n    const viewport = this.viewport;\n    const pixelWidth = source.pixelWidth;\n    const pixelHeight = source.pixelHeight;\n    if (!frame && renderSurface instanceof Texture) {\n      frame = renderSurface.frame;\n    }\n    if (frame) {\n      const resolution = source._resolution;\n      viewport.x = frame.x * resolution + 0.5 | 0;\n      viewport.y = frame.y * resolution + 0.5 | 0;\n      viewport.width = frame.width * resolution + 0.5 | 0;\n      viewport.height = frame.height * resolution + 0.5 | 0;\n    } else {\n      viewport.x = 0;\n      viewport.y = 0;\n      viewport.width = pixelWidth;\n      viewport.height = pixelHeight;\n    }\n    calculateProjection(\n      this.projectionMatrix,\n      0,\n      0,\n      viewport.width / source.resolution,\n      viewport.height / source.resolution,\n      !renderTarget.isRoot\n    );\n    this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n    if (didChange) {\n      this.onRenderTargetChange.emit(renderTarget);\n    }\n    return renderTarget;\n  }\n  clear(target, clear = CLEAR.ALL, clearColor) {\n    if (!clear)\n      return;\n    if (target) {\n      target = this.getRenderTarget(target);\n    }\n    this.adaptor.clear(\n      target || this.renderTarget,\n      clear,\n      clearColor,\n      this.viewport\n    );\n  }\n  contextChange() {\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Push a render surface to the renderer. This will bind the render surface to the renderer,\n   * @param renderSurface - the render surface to push\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to use when rendering to the render surface\n   */\n  push(renderSurface, clear = CLEAR.ALL, clearColor, frame) {\n    const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n    this._renderTargetStack.push({\n      renderTarget,\n      frame\n    });\n    return renderTarget;\n  }\n  /** Pops the current render target from the renderer and restores the previous render target. */\n  pop() {\n    this._renderTargetStack.pop();\n    const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n    this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n  }\n  /**\n   * Gets the render target from the provide render surface. Eg if its a texture,\n   * it will return the render target for the texture.\n   * If its a render target, it will return the same render target.\n   * @param renderSurface - the render surface to get the render target for\n   * @returns the render target for the render surface\n   */\n  getRenderTarget(renderSurface) {\n    if (renderSurface.isTexture) {\n      renderSurface = renderSurface.source;\n    }\n    return this._renderSurfaceToRenderTargetHash.get(renderSurface) ?? this._initRenderTarget(renderSurface);\n  }\n  /**\n   * Copies a render surface to another texture.\n   *\n   * NOTE:\n   * for sourceRenderSurfaceTexture, The render target must be something that is written too by the renderer\n   *\n   * The following is not valid:\n   * @example\n   * const canvas = document.createElement('canvas')\n   * canvas.width = 200;\n   * canvas.height = 200;\n   *\n   * const ctx = canvas2.getContext('2d')!\n   * ctx.fillStyle = 'red'\n   * ctx.fillRect(0, 0, 200, 200);\n   *\n   * const texture = RenderTexture.create({\n   *   width: 200,\n   *   height: 200,\n   * })\n   * const renderTarget = renderer.renderTarget.getRenderTarget(canvas2);\n   *\n   * renderer.renderTarget.copyToTexture(renderTarget,texture, {x:0,y:0},{width:200,height:200},{x:0,y:0});\n   *\n   * The best way to copy a canvas is to create a texture from it. Then render with that.\n   *\n   * Parsing in a RenderTarget canvas context (with a 2d context)\n   * @param sourceRenderSurfaceTexture - the render surface to copy from\n   * @param destinationTexture - the texture to copy to\n   * @param originSrc - the origin of the copy\n   * @param originSrc.x - the x origin of the copy\n   * @param originSrc.y - the y origin of the copy\n   * @param size - the size of the copy\n   * @param size.width - the width of the copy\n   * @param size.height - the height of the copy\n   * @param originDest - the destination origin (top left to paste from!)\n   * @param originDest.x - the x origin of the paste\n   * @param originDest.y - the y origin of the paste\n   */\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    if (originSrc.x < 0) {\n      size.width += originSrc.x;\n      originDest.x -= originSrc.x;\n      originSrc.x = 0;\n    }\n    if (originSrc.y < 0) {\n      size.height += originSrc.y;\n      originDest.y -= originSrc.y;\n      originSrc.y = 0;\n    }\n    const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n    size.width = Math.min(size.width, pixelWidth - originSrc.x);\n    size.height = Math.min(size.height, pixelHeight - originSrc.y);\n    return this.adaptor.copyToTexture(\n      sourceRenderSurfaceTexture,\n      destinationTexture,\n      originSrc,\n      size,\n      originDest\n    );\n  }\n  /**\n   * ensures that we have a depth stencil buffer available to render to\n   * This is used by the mask system to make sure we have a stencil buffer.\n   */\n  ensureDepthStencil() {\n    if (!this.renderTarget.stencil) {\n      this.renderTarget.stencil = true;\n      this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n    }\n  }\n  /** nukes the render target system */\n  destroy() {\n    this._renderer = null;\n    this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) => {\n      if (renderTarget !== key) {\n        renderTarget.destroy();\n      }\n    });\n    this._renderSurfaceToRenderTargetHash.clear();\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  _initRenderTarget(renderSurface) {\n    let renderTarget = null;\n    if (CanvasSource.test(renderSurface)) {\n      renderSurface = getCanvasTexture(renderSurface).source;\n    }\n    if (renderSurface instanceof RenderTarget) {\n      renderTarget = renderSurface;\n    } else if (renderSurface instanceof TextureSource) {\n      renderTarget = new RenderTarget({\n        colorTextures: [renderSurface]\n      });\n      if (renderSurface.source instanceof CanvasSource) {\n        renderTarget.isRoot = true;\n      }\n      renderSurface.once(\"destroy\", () => {\n        renderTarget.destroy();\n        this._renderSurfaceToRenderTargetHash.delete(renderSurface);\n        const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n        if (gpuRenderTarget) {\n          this._gpuRenderTargetHash[renderTarget.uid] = null;\n          this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n        }\n      });\n    }\n    this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n    return renderTarget;\n  }\n  getGpuRenderTarget(renderTarget) {\n    return this._gpuRenderTargetHash[renderTarget.uid] || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n  }\n  resetState() {\n    this.renderTarget = null;\n    this.renderSurface = null;\n  }\n}\n\nexport { RenderTargetSystem };\n//# sourceMappingURL=RenderTargetSystem.mjs.map\n","\"use strict\";\nfunction isRenderingToScreen(renderTarget) {\n  const resource = renderTarget.colorTexture.source.resource;\n  return globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement && document.body.contains(resource);\n}\n\nexport { isRenderingToScreen };\n//# sourceMappingURL=isRenderingToScreen.mjs.map\n","\"use strict\";\nfunction calculateProjection(pm, x, y, width, height, flipY) {\n  const sign = flipY ? 1 : -1;\n  pm.identity();\n  pm.a = 1 / width * 2;\n  pm.d = sign * (1 / height * 2);\n  pm.tx = -1 - x * pm.a;\n  pm.ty = -sign - y * pm.d;\n  return pm;\n}\n\nexport { calculateProjection };\n//# sourceMappingURL=calculateProjection.mjs.map\n","\"use strict\";\nconst blendModeIds = {\n  normal: 0,\n  add: 1,\n  multiply: 2,\n  screen: 3,\n  overlay: 4,\n  erase: 5,\n  \"normal-npm\": 6,\n  \"add-npm\": 7,\n  \"screen-npm\": 8,\n  min: 9,\n  max: 10\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _State = class _State {\n  constructor() {\n    this.data = 0;\n    this.blendMode = \"normal\";\n    this.polygonOffset = 0;\n    this.blend = true;\n    this.depthMask = true;\n  }\n  /**\n   * Activates blending of the computed fragment color values.\n   * @default true\n   */\n  get blend() {\n    return !!(this.data & 1 << BLEND);\n  }\n  set blend(value) {\n    if (!!(this.data & 1 << BLEND) !== value) {\n      this.data ^= 1 << BLEND;\n    }\n  }\n  /**\n   * Activates adding an offset to depth values of polygon's fragments\n   * @default false\n   */\n  get offsets() {\n    return !!(this.data & 1 << OFFSET);\n  }\n  set offsets(value) {\n    if (!!(this.data & 1 << OFFSET) !== value) {\n      this.data ^= 1 << OFFSET;\n    }\n  }\n  /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n  set cullMode(value) {\n    if (value === \"none\") {\n      this.culling = false;\n      return;\n    }\n    this.culling = true;\n    this.clockwiseFrontFace = value === \"front\";\n  }\n  get cullMode() {\n    if (!this.culling) {\n      return \"none\";\n    }\n    return this.clockwiseFrontFace ? \"front\" : \"back\";\n  }\n  /**\n   * Activates culling of polygons.\n   * @default false\n   */\n  get culling() {\n    return !!(this.data & 1 << CULLING);\n  }\n  set culling(value) {\n    if (!!(this.data & 1 << CULLING) !== value) {\n      this.data ^= 1 << CULLING;\n    }\n  }\n  /**\n   * Activates depth comparisons and updates to the depth buffer.\n   * @default false\n   */\n  get depthTest() {\n    return !!(this.data & 1 << DEPTH_TEST);\n  }\n  set depthTest(value) {\n    if (!!(this.data & 1 << DEPTH_TEST) !== value) {\n      this.data ^= 1 << DEPTH_TEST;\n    }\n  }\n  /**\n   * Enables or disables writing to the depth buffer.\n   * @default true\n   */\n  get depthMask() {\n    return !!(this.data & 1 << DEPTH_MASK);\n  }\n  set depthMask(value) {\n    if (!!(this.data & 1 << DEPTH_MASK) !== value) {\n      this.data ^= 1 << DEPTH_MASK;\n    }\n  }\n  /**\n   * Specifies whether or not front or back-facing polygons can be culled.\n   * @default false\n   */\n  get clockwiseFrontFace() {\n    return !!(this.data & 1 << WINDING);\n  }\n  set clockwiseFrontFace(value) {\n    if (!!(this.data & 1 << WINDING) !== value) {\n      this.data ^= 1 << WINDING;\n    }\n  }\n  /**\n   * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n   * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n   * @default 'normal'\n   */\n  get blendMode() {\n    return this._blendMode;\n  }\n  set blendMode(value) {\n    this.blend = value !== \"none\";\n    this._blendMode = value;\n    this._blendModeId = blendModeIds[value] || 0;\n  }\n  /**\n   * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n   * @default 0\n   */\n  get polygonOffset() {\n    return this._polygonOffset;\n  }\n  set polygonOffset(value) {\n    this.offsets = !!value;\n    this._polygonOffset = value;\n  }\n  toString() {\n    return `[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;\n  }\n  /**\n   * A quickly getting an instance of a State that is configured for 2d rendering.\n   * @returns a new State with values set for 2d rendering\n   */\n  static for2d() {\n    const state = new _State();\n    state.depthTest = false;\n    state.blend = true;\n    return state;\n  }\n};\n_State.default2d = _State.for2d();\nlet State = _State;\n\nexport { State };\n//# sourceMappingURL=State.mjs.map\n","\"use strict\";\nconst uniformParsers = [\n  // uploading pixi matrix object to mat3\n  {\n    type: \"mat3x3<f32>\",\n    test: (data) => {\n      const value = data.value;\n      return value.a !== void 0;\n    },\n    ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n    uniform: `\n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n  },\n  // uploading a pixi rectangle as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.width !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n  },\n  // uploading a pixi point as a vec2\n  {\n    type: \"vec2<f32>\",\n    test: (data) => data.type === \"vec2<f32>\" && data.size === 1 && data.value.x !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n  },\n  // uploading a pixi color as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n  },\n  // uploading a pixi color as a vec3\n  {\n    type: \"vec3<f32>\",\n    test: (data) => data.type === \"vec3<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n  }\n];\n\nexport { uniformParsers };\n//# sourceMappingURL=uniformParsers.mjs.map\n","\"use strict\";\nclass BatchableSprite {\n  constructor() {\n    this.batcherName = \"default\";\n    this.topology = \"triangle-list\";\n    // batch specific..\n    this.attributeSize = 4;\n    this.indexSize = 6;\n    this.packAsQuad = true;\n    this.roundPixels = 0;\n    this._attributeStart = 0;\n    // location in the buffer\n    this._batcher = null;\n    this._batch = null;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.bounds = null;\n  }\n  destroy() {\n  }\n}\n\nexport { BatchableSprite };\n//# sourceMappingURL=BatchableSprite.mjs.map\n","import { CanvasSource } from '../sources/CanvasSource.mjs';\nimport { Texture } from '../Texture.mjs';\n\n\"use strict\";\nconst canvasCache = /* @__PURE__ */ new Map();\nfunction getCanvasTexture(canvas, options) {\n  if (!canvasCache.has(canvas)) {\n    const texture = new Texture({\n      source: new CanvasSource({\n        resource: canvas,\n        ...options\n      })\n    });\n    const onDestroy = () => {\n      if (canvasCache.get(canvas) === texture) {\n        canvasCache.delete(canvas);\n      }\n    };\n    texture.once(\"destroy\", onDestroy);\n    texture.source.once(\"destroy\", onDestroy);\n    canvasCache.set(canvas, texture);\n  }\n  return canvasCache.get(canvas);\n}\nfunction hasCachedCanvasTexture(canvas) {\n  return canvasCache.has(canvas);\n}\n\nexport { getCanvasTexture, hasCachedCanvasTexture };\n//# sourceMappingURL=getCanvasTexture.mjs.map\n"],"names":["_RenderTarget","constructor","descriptor","this","uid","colorTextures","dirtyId","isRoot","_size","Float32Array","_managedColorTextures","defaultOptions","stencil","depth","i","push","width","height","resolution","antialias","map","texture","source","colorSource","colorTexture","resize","_resolution","on","onSourceResize","depthStencilTexture","ensureDepthStencilTexture","size","pixelWidth","pixelHeight","format","autoGenerateMipmaps","mipLevelCount","skipColorTexture","forEach","destroy","off","RenderTarget","BufferResource","buffer","offset","super","_resourceType","_touched","_resourceId","_bufferResource","destroyed","onBufferChange","emit","destroyBuffer","GpuStencilModesToPixi","NONE","DISABLED","stencilWriteMask","stencilReadMask","RENDERING_MASK_ADD","stencilFront","compare","passOp","stencilBack","RENDERING_MASK_REMOVE","MASK_ACTIVE","INVERSE_MASK_ACTIVE","loopMatrix","col","row","uboSyncFunctionsSTD40","f32","i32","uboSyncFunctionsWGSL","localUniformBit","name","vertex","header","main","end","localUniformBitGroup2","replace","localUniformBitGl","color32BitToUniform","abgr","out","alpha","textureBit","fragment","textureBitGl","CustomRenderPipe","renderer","_renderer","updateRenderable","destroyRenderable","validateRenderable","addRenderable","container","instructionSet","renderPipes","batch","break","add","execute","isRenderable","render","extension","type","WebGLPipes","WebGPUPipes","CanvasPipes","executeInstructions","renderGroup","instructions","instructionSize","instruction","renderPipeId","tempMatrix","Matrix","RenderGroupPipe","addRenderGroup","isCachedAsTexture","_addRenderableCacheAsTexture","_addRenderableDirect","_executeCacheAsTexture","_executeDirect","_batchableRenderGroup","return","batchableRenderGroup","get","BatchableSprite","renderable","root","transform","relativeGroupTransform","bounds","_textureBounds","addToBatch","textureNeedsUpdate","worldTransformMatrix","identity","translate","x","y","renderTarget","frame","globalUniforms","worldColor","finishRenderPass","pop","_batcher","updateElement","geometry","buffers","update","inverseParentTextureTransform","worldColorAlpha","clearList","list","index","j","length","tempContainer","Container","UPDATE_BLEND_COLOR_VISIBLE","updateRenderGroupTransforms","updateChildRenderGroups","worldAlpha","renderGroupParent","worldTransform","appendFrom","multiplyColors","groupColor","groupAlpha","copyFrom","localTransform","localColor","localAlpha","updateRenderGroupTransform","childrenToUpdate","updateTick","renderGroupDepth","Number","childrenAtDepth","child","parentRenderGroup","relativeRenderGroupDepth","updateTransformAndChildren","renderGroupChildren","updateFlags","didChange","updateLocalTransform","parent","_updateFlags","updateColorBlendVisibility","children","structureDidChange","groupColorAlpha","groupBlendMode","localBlendMode","globalDisplayStatus","localDisplayStatus","RenderGroupSystem","originalLocalTransform","_updateCachedRenderGroups","_updateRenderGroups","start","uniformBatch","renderEnd","closestCacheAsTexture","updateCacheTexture","_parentCacheAsTextureRenderGroup","invalidateMatrices","getLocalBounds","ceil","lastTexture","TexturePool","returnTexture","textureOptions","view","scaleMode","getOptimalTexture","_source","style","TextureStyle","Bounds","runOnRender","childrenRenderablesToUpdate","rebuildRequired","validateRenderables","_buildInstructions","_updateRenderables","upload","didViewUpdate","rendererOrPipes","reset","buildStart","blendMode","colorMask","sortableChildren","sortChildren","collectRenderablesWithEffects","buildEnd","WebGLSystem","WebGPUSystem","CanvasSystem","SpritePipe","sprite","gpuSprite","_getGpuSprite","_updateBatchableSprite","checkAndUpdateTexture","_texture","batchableSprite","visualBounds","_gpuData","_initGPUSprite","groupTransform","roundPixels","_roundPixels","_BatcherPipe","adaptor","state","State","for2d","_batchersByInstructionSet","Object","create","_activeBatches","_adaptor","init","getBatcher","_availableBatchers","batchers","default","DefaultBatcher","maxTextures","limits","maxBatchableTextures","_activeBatch","begin","batchableObject","batcherName","batches","indexBuffer","setDataWithSize","indexSize","attributeBuffer","float32View","attributeSize","batcher","dirty","action","shader","BatcherPipe","handleByMap","Batcher","_Filter","Shader","options","enabled","_state","padding","blendRequired","clipToViewport","addResource","apply","filterManager","input","output","clearMode","applyFilter","value","from","gpu","gl","rest","gpuProgram","glProgram","GpuProgram","GlProgram","Filter","MaskFilter","textureMatrix","TextureMatrix","filterUniforms","UniformGroup","uFilterMatrix","uMaskClamp","uClampFrame","uAlpha","uInverse","inverse","entryPoint","resources","uMaskTexture","_textureMatrix","uniforms","calculateSpriteMatrix","prepend","mapCoord","tempBounds","AlphaMaskEffect","FilterEffect","filters","Sprite","Texture","EMPTY","AlphaMaskPipe","_activeMaskStage","mask","maskedContainer","_maskOptions","canBundle","renderMaskToTexture","maskContainer","includeInBuild","collectRenderables","_maskedContainer","renderMask","filterEffect","measurable","getGlobalBounds","colorTextureSource","filterTexture","tx","minX","ty","minY","maskData","WEBGL","filter","ColorMaskPipe","_colorStack","_colorStackIndex","_currentColor","_container","colorStack","currentColor","_mask","setMask","StencilMaskPipe","_maskStackHash","_maskHash","WeakMap","_a","effect","setBlendMode","has","set","instructionsStart","instructionsLength","renderTargetUid","maskStackIndex","ensureDepthStencil","setStencilMode","clear","STENCIL","_BackgroundSystem","clearBeforeRender","_backgroundColor","Color","color","background","backgroundColor","backgroundAlpha","setAlpha","shared","setValue","warn","colorRgba","toArray","priority","BackgroundSystem","BLEND_MODE_FILTERS","handle","BlendMode","Error","ref","BlendModePipe","_isAdvanced","_filterHash","runners","prerender","_activeBlendMode","_endAdvancedBlendMode","_beginAdvancedBlendMode","_renderableList","renderables","imageTypes","png","jpg","webp","_ExtractSystem","_normalizeOptions","defaults","target","image","createImage","src","base64","defaultImageOptions","quality","canvas","toBlob","Promise","resolve","reject","blob","reader","FileReader","onload","result","onerror","readAsDataURL","toDataURL","convertToBlob","generateCanvas","textureGenerator","generateTexture","pixels","pixelInfo","getPixels","download","link","document","createElement","filename","href","body","appendChild","click","removeChild","log","console","join","ExtractSystem","RenderTexture","TextureSource","tempRect","Rectangle","noColor","GenerateTextureSystem","textureSourceOptions","clearColor","Array","isArray","region","copyTo","rectangle","Math","max","updateMipmaps","GlobalUniformSystem","_stackIndex","_globalUniformDataStack","_uniformsPool","_activeUniforms","_bindGroupPool","_activeBindGroups","bind","projectionMatrix","currentGlobalUniformData","projectionData","Point","globalUniformData","bindGroup","uniformGroup","_createUniforms","uProjectionMatrix","uResolution","uWorldTransformMatrix","uWorldColorAlpha","getUniformBindGroup","BindGroup","setResource","_currentGlobalUniformData","isStatic","SchedulerSystem","_tasks","_offset","Ticker","system","_update","repeat","func","duration","useOffset","id","performance","now","last","cancel","splice","task","elapsed","remove","saidHello","HelloSystem","hello","context","webGLVersion","getNavigator","userAgent","toLowerCase","indexOf","args","globalThis","sayHello","cleanHash","hash","clean","cleanHash2","cleanArray","arr","renderableGCTick","_RenderableGCSystem","_managedRenderables","_managedHashes","_managedArrays","maxUnusedTime","renderableGCMaxUnusedTime","_frequency","renderableGCFrequency","renderableGCActive","_handler","scheduler","run","_hashHandler","_arrayHandler","array","addManagedHash","addManagedArray","_now","gcTick","_updateInstructionGCTick","_lastUsed","once","_removeRenderable","managedRenderables","currentTick","rp","RenderableGCSystem","_TextureGCSystem","count","checkCount","checkCountMax","textureGCCheckCountMax","maxIdle","textureGCAMaxIdle","textureGCMaxIdle","active","textureGCActive","postrender","renderingToScreen","managedTextures","autoGarbageCollect","resource","unload","TextureGCSystem","_ViewSystem","autoDensity","deprecation","screen","createCanvas","getCanvasTexture","transparent","desiredScreenWidth","desiredScreenHeight","removeView","parentNode","SharedSystems","SharedRenderPipes","createUboSyncFunction","uboElements","parserCode","arrayGenerationFunction","singleSettersMap","funcFragments","prev","uboElement","data","parsed","test","ubo","template","fragmentSrc","Function","UboSystem","_syncFunctionHash","_systemCheck","ensureUniformGroup","uniformData","getUniformGroupData","layout","usage","UNIFORM","COPY_DST","_signature","_initUniformGroup","uniformGroupSignature","elements","keys","uniformStructures","createUboElements","syncFunction","_generateUboSync","generateUboSync","syncUniformGroup","uniformGroupData","dataInt32","updateUniformGroup","_dirtyId","synced","ensureAttributes","extractedData","attributes","attribute","attributeData","instance","tempStride","tempStart","stride","ensureStartAndStride","RenderTargetSystem","rootViewPort","viewport","onRenderTargetChange","SystemRunner","defaultClearColor","_renderSurfaceToRenderTargetHash","Map","_gpuRenderTargetHash","_renderTargetStack","renderableGC","renderStart","rootRenderTarget","HTMLCanvasElement","contains","isRenderingToScreen","renderSurface","getRenderTarget","gpuRenderTarget","getGpuRenderTarget","resizeGpuRenderTarget","pm","flipY","sign","a","d","calculateProjection","startRenderPass","ALL","contextChange","currentRenderTargetData","isTexture","_initRenderTarget","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","min","key","CanvasSource","delete","destroyGpuRenderTarget","initGpuRenderTarget","resetState","blendModeIds","normal","multiply","overlay","erase","_State","polygonOffset","blend","depthMask","offsets","cullMode","culling","clockwiseFrontFace","depthTest","_blendMode","_blendModeId","_polygonOffset","toString","default2d","uniformParsers","uniform","red","topology","packAsQuad","_attributeStart","_batch","canvasCache","onDestroy"],"sourceRoot":""}